---
- name: Sonarqube post-configuration
  hosts: localhost
  gather_facts: false
  vars:
    post_conf_job: true
    argo_infra_ns_check:
      failed: true
  tasks:
    - name: Import socle-config role
      ansible.builtin.import_role:
        name: socle-config

    - name: Import sonarqube role
      ansible.builtin.import_role:
        name: gitops/post-install/sonarqube

    - name: Get sonarqube secret
      kubernetes.core.k8s_info:
        namespace: "{{ dsc.sonarqube.namespace }}"
        kind: Secret
        name: sonarqube
      register: sonarqube_secret
      ignore_errors: true

    - name: Get SonarQube admin password secret
      kubernetes.core.k8s_info:
        namespace: "{{ dsc.sonarqube.namespace }}"
        kind: Secret
        name: "sonarqube"
      register: sonarqube_pwd

    - name: Check existence of SonarQube DSO admin token
      ansible.builtin.uri:
        validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
        url: "https://{{ sonar_domain }}/api/user_tokens/search?login=admin"
        user: "admin"
        password: "{{ sonarqube_pwd.resources[0].data.password | b64decode }}"
        force_basic_auth: true
        method: GET
        status_code: [200]
      register: token_check

    - name: Revoke SonarQube DSO admin token
      ansible.builtin.uri:
        validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
        url: "https://{{ sonar_domain }}/api/user_tokens/revoke"
        user: "admin"
        password: "{{ sonarqube_pwd.resources[0].data.password | b64decode }}"
        force_basic_auth: true
        method: POST
        body_format: form-urlencoded
        body:
          login: "admin"
          name: "DSO"
        status_code: [204]
      when: "'DSO' in (token_check.json.userTokens | map(attribute='name') | list)"
      ignore_errors: true

    - name: Generate new SonarQube DSO admin token
      ansible.builtin.uri:
        validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
        url: "https://{{ sonar_domain }}/api/user_tokens/generate?name=DSO"
        user: "admin"
        password: "{{ sonarqube_pwd.resources[0].data.password | b64decode }}"
        force_basic_auth: true
        method: POST
        status_code: [200, 204]
      register: token_pass

    - name: Update vault-secrets sonarApiToken
      block:
        - name: Reset envs vars
          ansible.builtin.set_fact:
            envs: []

        - name: Set minimal envs vars
          ansible.builtin.set_fact:
            envs:
              - name: "{{ dsc_name }}"
                apps:
                  - argocd_app: sonarqube
                    vault_values:
                      auth:
                        sonarApiToken: >-
                          {{
                            (token_pass.json.token)if token_pass is defined and
                            token_pass.json.token | length > 0
                            else ''
                          }}

        - name: Post-install vault-secrets run
          ansible.builtin.import_role:
            name: gitops/vault-secrets
          vars:
            vault_secrets_post_install: true
            post_vault_update: true
