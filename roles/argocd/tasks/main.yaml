- name: Get argo client secret
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: "{{ KEYCLOAK_NAMESPACE }}"
    name: keycloak-client-secret-argo-client
  register: argocd_secret
  failed_when: argocd_secret.resources | length == 0

- name: Argo crb
  kubernetes.core.k8s:
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        creationTimestamp: null
        name: system:openshift:scc:privileged
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: system:openshift:scc:privileged
      subjects:
        - kind: ServiceAccount
          namespace: "{{ ARGOCD_NAMESPACE }}"
          name: argo-argo-cd-argocd-repo-server
        - kind: ServiceAccount
          namespace: "{{ ARGOCD_NAMESPACE }}"
          name: argo-argo-cd-argocd-server
        - kind: ServiceAccount
          namespace: "{{ ARGOCD_NAMESPACE }}"
          name: argo-redis

- name: Add helm repo
  kubernetes.core.helm_repository:
    name: bitnami
    repo_url: https://charts.bitnami.com/bitnami

- name: Set extra env vars
  ansible.builtin.set_fact:
    # TODO variabilize openshift boolean
    helm_values: |
      openshift:
        enabled: true
      config:
        secret:
          argocdServerAdminPassword: "{{ ARGOCD_ADMIN_PASSWORD }}"
      {% if exposed_ca != 'none' %}
        tlsCerts:
          {{ GITLAB_DOMAIN }}: |
            {{ exposed_ca_pem | indent(width=6, first=False) }}
      {% endif %}
      dex:
        enabled: true
      server:
        insecure: true
        config:
          clusterResources: "true"
          url: "https://{{ ARGOCD_DOMAIN }}/"
          oidc.config: |
            issuer: https://{{ KEYCLOAK_DOMAIN }}/auth/realms/dso
            requestedScopes: ["openid", "generic"]
            name: Keycloak
            clientID: {{ argocd_secret.resources[0].data.CLIENT_ID | b64decode }}
            clientSecret: {{ argocd_secret.resources[0].data.CLIENT_SECRET | b64decode }}
      {% if exposed_ca != 'none' %}
            rootCA: |
              {{ exposed_ca_pem | indent(width=8, first=False) }}
      {% endif %}
          users.anonymous.enabled: "false"
          admin.enabled: "false" # TODO variabilize
          resource.exclusions: |
            - apiGroups:
              - tekton.dev
              clusters:
              - '*'
              kinds:
              - TaskRun
              - PipelineRun
        extraEnvVars:
      {% if USE_PROXY %}
          - name: HTTP_PROXY
            value: "{{ HTTP_PROXY }}"
          - name: HTTPS_PROXY
            value: "{{ HTTPS_PROXY }}"
          - name: NO_PROXY
            value: "{{ NO_PROXY }},argo-argo-cd-repo-server"
      {% endif %}
      repoServer:
        extraEnvVars:
      {% if USE_PROXY %}
          - name: HTTP_PROXY
            value: "{{ HTTP_PROXY }}"
          - name: HTTPS_PROXY
            value: "{{ HTTPS_PROXY }}"
          - name: NO_PROXY
            value: "{{ NO_PROXY }}"
      {% endif %}
      extraDeploy:
        - apiVersion: v1
          data:
            policy.csv: |
              p, role:admin, *, *, */*, allow
              p, role:nada, *, *, */*, deny
              g, system:cluster-admins, role:admin
              g, cluster-admins, role:admin
              g, /ArgoCDAdmins, role:admin
              g, ArgoCDAdmins, role:admin
            scopes: "[groups]"
            policy.default: role:nada
            admin.enabled: "false"
          kind: ConfigMap
          metadata:
            name: argocd-rbac-cm
            namespace: {{ ARGOCD_NAMESPACE }}

- name: Deploy helm
  kubernetes.core.helm:
    name: argo
    chart_ref: bitnami/argo-cd
    release_namespace: "{{ ARGOCD_NAMESPACE }}"
    create_namespace: true
    values: "{{ helm_values | from_yaml }}"

- name: Find gitlab token in inventory
  kubernetes.core.k8s_info:
    namespace: "{{ CONSOLE_NAMESPACE }}"
    kind: ConfigMap
    name: dso-config
  register: ansible_inventory

- name: Create global gitlab secret
  kubernetes.core.k8s:
    definition:
      data:
        password: "{{ ansible_inventory.resources[0].data.GITLAB_TOKEN | b64encode }}"
        url: "{{ ('https://' + ([GITLAB_DOMAIN, projectsRootDir] | flatten | join ('/') )) | b64encode }}"
        username: "{{ 'root' | b64encode }}"
      kind: Secret
      metadata:
        labels:
          argocd.argoproj.io/secret-type: repo-creds
        name: gitlab
        namespace: "{{ ARGOCD_NAMESPACE }}"
      type: Opaque

- name: Install routes
  kubernetes.core.k8s:
    template: "{{ item }}"
  with_items:
    - ingress.yaml.j2
