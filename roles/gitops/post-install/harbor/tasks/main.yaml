---
- name: Get harbor config
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "{{ harbor_auth_url }}/api/v2.0/configurations"
    password: "{{ harbor_current_vault_values.data.data.global.harborAdminPassword }}"
    user: admin
    force_basic_auth: true
    body_format: json
    status_code: [200, 503]
  until: get_harbor_config.status != 503
  register: get_harbor_config
  retries: 15

- name: Get harbor client secret
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: "{{ dsc.keycloak.namespace }}"
    name: keycloak-client-secret-harbor-client
  register: harbor_secret
  failed_when: harbor_secret.resources | length == 0

- name: Set Harbor config
  ansible.builtin.set_fact:
    harbor_config:
      auth_mode: oidc_auth
      notification_enable: true
      oidc_admin_group: /admin
      oidc_auto_onboard: true
      oidc_client_id: "{{ harbor_secret.resources[0].data.CLIENT_ID | b64decode }}"
      oidc_endpoint: https://{{ keycloak_domain }}/realms/{{ dsc.keycloak.applicationRealm }}
      oidc_extra_redirect_parms: "{}"
      oidc_group_filter: ""
      oidc_groups_claim: groups
      oidc_name: keycloak
      oidc_scope: openid,generic
      oidc_user_claim: email
      oidc_verify_cert: "{{ dsc.exposedCA.type == 'none' }}"
      project_creation_restriction: adminonly
      quota_per_project_enable: true
      read_only: false
      robot_name_prefix: robot$
      robot_token_duration: 30
      self_registration: false

- name: Assert element
  ansible.builtin.assert:
    that:
      - harbor_config[item] == get_harbor_config.json[item].value
    quiet: true
  with_items:
    - "{{ harbor_config | list }}"
  ignore_errors: true
  register: check_config

- name: PUT harbor config
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    method: PUT
    url: "{{ harbor_auth_url }}/api/v2.0/configurations"
    password: "{{ harbor_current_vault_values.data.data.global.harborAdminPassword }}"
    user: admin
    force_basic_auth: true
    body_format: json
    body: "{{ harbor_config | combine({'oidc_client_secret': harbor_secret.resources[0].data.CLIENT_SECRET | b64decode}) }}"
  when: check_config.failed is defined and check_config.failed
  changed_when: true

- name: Get trivy schedule scan config
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "{{ harbor_auth_url }}/api/v2.0/system/scanAll/schedule"
    password: "{{ harbor_current_vault_values.data.data.global.harborAdminPassword }}"
    user: admin
    force_basic_auth: true
    body_format: json
    status_code: [200, 503]
  until: get_trivy_schedule_config.status != 503
  register: get_trivy_schedule_config

- name: Enable daily trivy scans
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    method: POST
    url: "{{ harbor_auth_url }}/api/v2.0/system/scanAll/schedule"
    password: "{{ harbor_current_vault_values.data.data.global.harborAdminPassword }}"
    user: admin
    force_basic_auth: true
    body_format: json
    status_code: [201]
    body:
      "schedule":
        "type": "Daily"
        "cron": "0 0 0 * * *"
  when: get_trivy_schedule_config.json is undefined

- name: Activate proxy cache
  when: dsc.harbor.proxyCache is defined
  block:
    - name: Enable proxy cache for another registry loop
      ansible.builtin.include_tasks:
        file: create_proxy_cache.yaml
      loop: "{{ dsc.harbor.proxyCache }}"
      loop_control:
        loop_var: proxy_cache
        label: "{{ proxy_cache.name }}"

- name: Patch podMonitors
  when: >
    dsc.global.metrics.enabled and
    dsc.global.metrics.additionalLabels is defined
  block:
    - name: Get podMonitors
      kubernetes.core.k8s_info:
        api_version: monitoring.coreos.com/v1
        kind: PodMonitor
        namespace: "{{ dsc.harbor.namespace }}"
      register: pod_monitors

    - name: Get pod_monitors names
      ansible.builtin.set_fact:
        pod_monitors_names: "{{ pod_monitors.resources | map(attribute='metadata.name') }}"

    - name: Patch podMonitors
      kubernetes.core.k8s:
        kind: PodMonitor
        namespace: "{{ dsc.harbor.namespace }}"
        state: patched
        name: "{{ item }}"
        definition:
          metadata:
            labels:
              "{{ dsc.global.metrics.additionalLabels }}"
      loop: "{{ pod_monitors_names }}"
