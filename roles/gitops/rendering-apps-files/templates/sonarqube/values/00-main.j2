sonarqube:
  fullnameOverride: sonarqube-sonarqube
  nameOverride: sonar
  image:
    pullPolicy: IfNotPresent
    repository: <path:forge-dso/data/env/{{ dsc_name }}/apps/common/values#image | jsonPath {.repository.docker}>/sonarqube
  
  sonarWebContext: /
  
  ingress:
    enabled: true
    # Used to create an Ingress record.
    hosts:
      - name: <path:forge-dso/data/env/{{ dsc_name }}/apps/common/values#domain | jsonPath {.sonarqube}>
        pathType: Prefix
        path: "/"
    annotations:
{% for key, val in dsc.ingress.annotations.items() %}
      {{ key }}: "{{ val }}"
{% endfor %}
    # This property allows for reports up to a certain size to be uploaded to SonarQube
      nginx.ingress.kubernetes.io/proxy-body-size: "64m"
    ingressClassName: <path:forge-dso/data/env/{{ dsc_name }}/apps/common/values#ingressClassName>
    labels:
      app: "sonar"
  
  # Should be kept as false even if dsc.global.platform == "kubernetes" and it may be best to work with your cluster administrator to either provide specific nodes with the proper kernel settings, or ensure they are set cluster wide : sysctl -a "name=vm.max_map_count value=262144"
  initSysctl:
    enabled: false
  
  initFs:
    enabled: false
  
  prometheusExporter:
    enabled: {{ dsc.global.metrics.enabled }}
  
  # Enable podMonitor now with GitOps deployment :)
  prometheusMonitoring:
    podMonitor:
      enabled: {{ dsc.global.metrics.enabled }}
{% if dsc.global.metrics.additionalLabels is defined %}
      labels: {{ dsc.global.metrics.additionalLabels }}
{% endif %}
  
  jvmOpts: "-javaagent:/opt/sonarqube/extensions/plugins/sonarqube-community-branch-plugin-1.23.0.jar=web"
  jvmCeOpts: "-javaagent:/opt/sonarqube/extensions/plugins/sonarqube-community-branch-plugin-1.23.0.jar=ce"
  
  ## a monitoring passcode needs to be defined in order to get reasonable probe results
  # not setting the monitoring passcode will result in a deployment that will never be ready
  monitoringPasscodeSecretName: "sonar-monitoring-password"
  monitoringPasscodeSecretKey: "monitoring-password"
  
  sonarProperties:
    sonar.auth.oidc.enabled: "true"
    sonar.auth.oidc.allowUsersToSignUp: "true"
    sonar.auth.oidc.autoLogin: "false"
    sonar.auth.oidc.groupsSync.claimName: "groups"
    sonar.auth.oidc.loginStrategy: "Email"
    sonar.auth.oidc.groupsSync: "true"
    sonar.auth.oidc.scopes: "openid generic"
    sonar.auth.oidc.loginStrategy.customClaim.name: "upn"
    sonar.auth.oidc.clientId.secured: <path:forge-dso/data/env/{{ dsc_name }}/apps/keycloak/values#client | jsonPath {.sonar.id}>
    sonar.auth.oidc.clientSecret.secured: <path:forge-dso/data/env/{{ dsc_name }}/apps/keycloak/values#client | jsonPath {.sonar.secret}>
    sonar.auth.oidc.issuerUri: "https://<path:forge-dso/data/env/{{ dsc_name }}/apps/common/values#domain | jsonPath {.keycloak}>/realms/dso"
    sonar.core.serverBaseURL: https://<path:forge-dso/data/env/{{ dsc_name }}/apps/common/values#domain | jsonPath {.sonarqube}>
    sonar.plugins.risk.consent: "ACCEPTED"
  
  ## Override JDBC values
  ## for external Databases
  jdbcOverwrite:
    # If enable the JDBC Overwrite, make sure to set `postgresql.enabled=false`
    enable: true
    jdbcUrl: "jdbc:postgresql://pg-cluster-sonar-rw/sonardb?socketTimeout=1500"
    jdbcUsername: "dsoadmin"
    jdbcSecretName: "pg-cluster-sonar-app"
    jdbcSecretPasswordKey: "password"
  
  postgresql:
    enabled: false
  
  sonarqubeFolder: /opt/sonarqube
  
  # For OpenShift set create=true to ensure service account is created.
  serviceAccount:
    create: true
  
  account:
    adminPasswordSecretName: "sonarqube"
  #setAdminPassword: # after account deprecation end
    #passwordSecretName: "sonarqube"
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
  curlContainerImage: <path:forge-dso/data/env/{{ dsc_name }}/apps/common/values#image | jsonPath {.repository.docker}>/curlimages/curl:8.11.0
  adminJobAnnotations: {}
  
  terminationGracePeriodSeconds: 60
