crds:
  install: true
  keep: true
{% if dsc.global.platform == "openshift" %}
openshift:
  enabled: true
{% endif %}
configs:
{% if dsc.argocd.admin.enabled %}
  secret:
    argocdServerAdminPassword: "{{ dsc.argocd.admin.password }}"
{% endif %}
  params:
    server.insecure: true
  rbac:
    policy.csv: |
      p, role:admin, *, *, */*, allow
      p, role:nada, applicationsets, *, */*, deny
      p, role:nada, applications, *, */*, deny
      p, role:nada, logs, *, */*, deny
      p, role:nada, exec, *, */*, deny
      p, role:nada, certificates, *, *, deny
      p, role:nada, accounts, *, *, deny
      p, role:nada, gpgkeys, *, *, deny
      p, role:nada, projects, *, *, deny
      p, role:nada, clusters, *, *, deny
      p, role:nada, repositories, get, *, allow
      g, system:cluster-admins, role:admin
      g, cluster-admins, role:admin
      g, /admin, role:admin
      g, admin, role:admin
{% if dsc.global.environment == 'development' %}
      p, cpin-sa, applications, *, *, allow
{% endif %}
    scopes: "[groups]"
    policy.default: role:nada
    admin.enabled: "false"
  cm:
{% if instance_name != "conf-dso" %}
    application.instanceLabelKey: argocd.argoproj.io/instance.{{ instance_name }}
{% endif %}
    clusterResources: "true"
    url: "https://{{ argocd_domain }}"
    oidc.config: |
      issuer: https://{{ keycloak_domain }}/realms/dso
      requestedScopes: ["openid", "generic"]
      name: Keycloak
      clientID: {{ argocd_secret.resources[0].data.CLIENT_ID | b64decode }}
      clientSecret: {{ argocd_secret.resources[0].data.CLIENT_SECRET | b64decode }}
{% if dsc.exposedCA.type != 'none' %}
      rootCA: |
        {{ exposed_ca_pem | indent(width=8, first=False) }}
{% endif %}
    users.anonymous.enabled: "false"
    admin.enabled: "{{ dsc.argocd.admin.enabled }}"
    kustomize.buildOptions: "--enable-helm"
    resource.exclusions: |
      - apiGroups:
        - tekton.dev
        clusters:
        - '*'
        kinds:
        - TaskRun
        - PipelineRun
      - apiGroups:
        - wgpolicyk8s.io
        - aquasecurity.github.io
        clusters:
        - '*'
        kinds:
        - '*'
      - apiGroups:
        - postgresql.cnpg.io
        clusters:
        - '*'
        kinds:
        - Backup
      - apiGroups:
        - reports.kyverno.io
        clusters:
        - '*'
        kinds:
        - EphemeralReport
      - apiGroups:
        - reports.kyverno.io/v1
        clusters:
        - '*'
        kinds:
        - EphemeralReport
{% if dsc.global.environment == 'development' %}
    accounts.cpin-sa: apiKey
{% endif %}
redis-ha:
  enabled: true
  image:
    tag: 7.4.1-alpine
controller:
  replicas: 3
dex:
  enabled: false
server:
  replicas: 3
  ingress:
    ingressClassName: {{ dsc.ingress.className | default('') }}
  ingressGrpc:
    ingressClassName: {{ dsc.ingress.className | default('') }}
repoServer:
  replicas: 3
  initContainers:
{% if dsc.global.dockerAccount.enabled %}
  - name: helm-login
    image: quay.io/argoproj/argocd:{{ argo_app_version }}
    command: ["sh", "-c"]
    args:
      - |
        cp /usr/local/bin/helm /helm-custom-binary/helm.bin;
        cat <<'EOF' > /helm-custom-binary/helm
        #!/usr/bin/env bash
        args=($@)
        if [ "$#" -gt 2 ] && [ $1 == "registry" ] && { [ "$2" = "login" ] || [ "$2" = "logout" ]; } && [ $3 == "registry-1.docker.io/bitnamicharts" ]; then
          args[2]="registry-1.docker.io"
        fi
        helm.bin ${args[@]}
        EOF
        chmod +x /helm-custom-binary/helm;
        echo $HELM_PASSWORD | helm registry login -u $HELM_USER registry-1.docker.io --password-stdin;
    volumeMounts:
    - mountPath: /helm-working-dir
      name: helm-working-dir
    - mountPath: /helm-custom-binary
      name: helm-custom-binary
{% if dsc.global.platform != "openshift" %}
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: false
      runAsNonRoot: true
      runAsUser: 999 
      seccompProfile:
        type: RuntimeDefault
{% endif %}
    env:
    - name: HELM_USER
      valueFrom:
        secretKeyRef:
          name: helm-docker-registry-secret
          key: username
    - name: HELM_PASSWORD
      valueFrom:
        secretKeyRef:
          name: helm-docker-registry-secret
          key: password
    - name: HELM_CACHE_HOME
      value: /helm-working-dir
    - name: HELM_CONFIG_HOME
      value: /helm-working-dir
    - name: HELM_DATA_HOME
      value: /helm-working-dir
{% if dsc.proxy.enabled %}
    - name: HTTP_PROXY
      value: "{{ dsc.proxy.http_proxy }}"
    - name: HTTPS_PROXY
      value: "{{ dsc.proxy.https_proxy }}"
    - name: NO_PROXY
      value: "{{ dsc.proxy.no_proxy }},{{ dsc_name }}-argocd-repo-server"
{% endif %}
  volumes:
  - name: helm-custom-binary
    emptyDir: {}
  volumeMounts:
  - name: helm-custom-binary
    mountPath: /usr/local/bin/helm
    subPath: helm
  - name: helm-custom-binary
    mountPath: /usr/local/bin/helm.bin
    subPath: helm.bin
{% endif %}
applicationSet:
  enabled: false
  replicas: 2
  webhook:
    ingress:
      ingressClassName: {{ dsc.ingress.className | default('') }}
notifications:
  enabled: false
  webhook:
    ingress:
      ingressClassName: {{ dsc.ingress.className | default('') }}
