---
- name: Create or update DsoSocleConfig CRD
  kubernetes.core.k8s:
    definition: "{{ lookup('ansible.builtin.file', 'crd-conf-dso.yaml') | from_yaml }}"
  when: post_conf_job is not defined

- name: Get socle config from conf-dso dsc (default)
  when: dsc_cr is not defined
  kubernetes.core.k8s_info:
    kind: dsc
    name: conf-dso
    api_version: cloud-pi-native.fr/v1alpha
  register: socle_config

- name: Get socle config from dsc_cr extra var when defined
  when: dsc_cr is defined
  kubernetes.core.k8s_info:
    kind: dsc
    name: "{{ dsc_cr }}"
    api_version: cloud-pi-native.fr/v1alpha
  register: socle_config_custom

- name: Check socle_config_custom and exit if empty
  when: (dsc_cr is defined) and (socle_config_custom.resources | length == 0)
  block:
    - name: Warning message
      ansible.builtin.debug:
        msg:
          - Attention ! Vous avez lancé le playbook d'installation avec l'option '-e dsc_cr={{ dsc_cr }}'
          - mais la ressource dsc nommée '{{ dsc_cr }}' est vide ou inexistante côté cluster !
          - ""
          - Si votre intention est bien d'utiliser votre propre configuration plutôt que 'conf-dso', ressource dsc par défaut,
          - alors veuiller déclarer votre resource dsc '{{ dsc_cr }}' dans un fichier YAML
          - "nommé par exemple 'ma-conf-dso.yaml' et la créer via la commande suivante :"
          - ""
          - " kubectl apply -f ma-conf-dso.yaml "
          - ""
          - Puis relancer l'installation.

    - name: Exit playbook
      ansible.builtin.meta: end_play

- name: Set socle_config fact when dsc_cr defined and not empty
  ansible.builtin.set_fact:
    socle_config: "{{ socle_config_custom }}"
  when: (socle_config_custom is not skipped) and (socle_config_custom.resources | length > 0)

- name: Initialize config and exit
  when: socle_config.resources | length == 0
  block:
    - name: Create socle config example
      kubernetes.core.k8s:
        definition: "{{ lookup('ansible.builtin.file', 'cr-conf-dso-default.yaml') | from_yaml }}"

    - name: Disclaimer
      ansible.builtin.debug:
        msg:
          - Il semblerait que vous n'ayez jamais installé le socle sur ce cluster ou que la configuration par défaut ait été supprimée.
          - Veuillez modifier la resource de type dsc par défaut nommée 'conf-dso' et de scope cluster
          - "via la commande suivante :"
          - ""
          - " kubectl edit dsc conf-dso "
          - ""
          - Puis relancer l'installation.
          - ""
          - Attention ! Si vous relancez l'installation sans modifier la configuration par défaut, celle-ci s'appliquera telle qu'elle.
          - Ce n'est probablement pas ce que vous souhaitez faire.
          - ""
          - Alternativement, vous pouvez aussi déclarer la resource dsc de nom conf-dso (ou tout autre nom à votre convenance)
          - "dans un fichier YAML nommé par exemple 'ma-conf-dso.yaml', pour ensuite la créer via la commande suivante :"
          - ""
          - " kubectl apply -f ma-conf-dso.yaml "
          - ""
          - Puis relancer l'installation.
          - ""
          - "Si vous utilisez la resource dsc par défaut nommée conf-dso, vous relancerez le playbook d'installation comme ceci :"
          - ""
          - " ansible-playbook install.yaml "
          - ""
          - Si au contraire vous souhaitez utiliser un nom de resource différent, associé à une configuration différente,
          - "alors vous devrez utiliser la commande suivante pour relancer l'installation (exemple avec une dsc nommée conf-perso) :"
          - ""
          - " ansible-playbook install.yaml -e dsc_cr=conf-perso "

    - name: Exit playbook
      ansible.builtin.meta: end_play

- name: Set DSC Name fact
  ansible.builtin.set_fact:
    dsc_name: "{{ socle_config.resources[0].metadata.name }}"

- name: Set DSC fact
  ansible.builtin.set_fact:
    dsc: "{{ socle_config.resources[0] }}"

- name: Set some instance name
  ansible.builtin.set_fact:
    instance_name: "{{ dsc.metadata.name }}"

- name: Set some facts
  ansible.builtin.set_fact:
    dsc_default_config: "{{ lookup('ansible.builtin.file', 'config.yaml') | from_yaml }}"
    dsc_default_releases: "{{ lookup('ansible.builtin.file', 'releases.yaml') | from_yaml }}"

- name: Set some facts
  ansible.builtin.set_fact:
    dsc: "{{ dsc_default_releases | combine(dsc_default_config, recursive=True) | combine(dsc, recursive=True) }}"
- name: Set some facts
  ansible.builtin.set_fact:
    dsc: "{{ dsc.spec }}"

- name: Set private registry
  ansible.builtin.set_fact:
    use_private_registry: "{{ dsc.global.registry is defined and dsc.global.registry | length > 0 | bool }}"

- name: Use imagePullSecrets
  ansible.builtin.set_fact:
    use_image_pull_secrets: "{{ dsc.global.imagePullSecretsData is defined and dsc.global.imagePullSecretsData | length > 0 | bool }}"

- name: Set root_domain fact
  ansible.builtin.set_fact:
    root_domain: "{{ dsc.global.rootDomain }}"

- name: Set infra_root_domain fact
  ansible.builtin.set_fact:
    infra_root_domain: "{{ dsc.global.infraRootDomain }}"

- name: Set tools domains facts
  ansible.builtin.set_fact:
    argocd_domain: "{{ dsc.argocd.domain | default(dsc.argocd.subDomain ~ root_domain) }}"
    awx_domain: "{{ dsc.awx.domain | default(dsc.awx.subDomain ~ root_domain) }}"
    argocdinfra_domain: "{{ dsc.argocdInfra.domain | default(dsc.argocdInfra.subDomain ~ infra_root_domain) }}"
    console_domain: "{{ dsc.console.domain | default(dsc.console.subDomain ~ root_domain) }}"
    gitlab_domain: "{{ dsc.gitlab.domain | default(dsc.gitlab.subDomain ~ root_domain) }}"
    grafana_domain: "{{ dsc.grafana.domain | default(dsc.grafana.subDomain ~ root_domain) }}"
    harbor_domain: "{{ dsc.harbor.domain | default(dsc.harbor.subDomain ~ root_domain) }}"
    keycloak_domain: "{{ dsc.keycloak.domain | default(dsc.keycloak.subDomain ~ root_domain) }}"
    keycloakinfra_domain: "{{ dsc.keycloakInfra.domain | default(dsc.keycloakInfra.subDomain ~ infra_root_domain) }}"
    nexus_domain: "{{ dsc.nexus.domain | default(dsc.nexus.subDomain ~ root_domain) }}"
    sonar_domain: "{{ dsc.sonarqube.domain | default(dsc.sonarqube.subDomain ~ root_domain) }}"
    vault_domain: "{{ dsc.vault.domain | default(dsc.vault.subDomain ~ root_domain) }}"

- name: Set Vault infra domain fact
  when: lookup('ansible.builtin.env', 'VAULT_INFRA_DOMAIN') == ''
  ansible.builtin.set_fact:
    vaultinfra_domain: "{{ dsc.vaultInfra.domain | default(dsc.vaultInfra.subDomain ~ infra_root_domain) }}"

- name: Set Vault infra domain fact
  when: lookup('ansible.builtin.env', 'VAULT_INFRA_DOMAIN') != ''
  ansible.builtin.set_fact:
    vaultinfra_domain: "{{ lookup('ansible.builtin.env', 'VAULT_INFRA_DOMAIN') }}"

- name: Probe Vaultinfra domain cert validity
  ansible.builtin.uri:
    url: "https://{{ vaultinfra_domain }}"
    method: GET
    return_content: false
    validate_certs: true
  register: vaultinfra_probe
  ignore_errors: true

- name: Set vaultinfra_cert_valid fact
  ansible.builtin.set_fact:
    vaultinfra_cert_valid: "{{ vaultinfra_probe.failed is not defined or not vaultinfra_probe.failed }}"

- name: Debug domains facts
  ansible.builtin.debug:
    msg:
      - "argocd_domain: {{ argocd_domain }}"
      - "argocdinfra_domain: {{ argocdinfra_domain }}"
      - "awx_domain: {{ awx_domain }}"
      - "console_domain: {{ console_domain }}"
      - "gitlab_domain: {{ gitlab_domain }}"
      - "grafana_domain: {{ grafana_domain }}"
      - "harbor_domain: {{ harbor_domain }}"
      - "keycloak_domain: {{ keycloak_domain }}"
      - "keycloakinfra_domain: {{ keycloakinfra_domain }}"
      - "nexus_domain: {{ nexus_domain }}"
      - "sonar_domain: {{ sonar_domain }}"
      - "vault_domain: {{ vault_domain }}"
      - "vaultinfra_domain: {{ vaultinfra_domain }}"

- name: Set vaultinfra_kv_name fact
  ansible.builtin.set_fact:
    vaultinfra_kv_name: "dso-{{ dsc.global.gitOps.envName }}"

- name: Set keycloak_reset_password fact
  ansible.builtin.set_fact:
    keycloak_reset_password: false

- name: Import ca role
  ansible.builtin.import_role:
    name: ca

- name: Set envs fact
  ansible.builtin.include_tasks:
    file: envs.yaml
