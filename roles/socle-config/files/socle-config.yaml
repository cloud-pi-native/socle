WARNING: DO NOT EDIT THIS FILE DIRECTLY, EDIT "cluster-infra/socle-config" CONFIGMAP INSTEAD

# CA
# Do you want to inject a CA in tools ?
# list the resources to inject
# if key is not provided it loads all keys
# resources must be available in all namespaces
additionals_ca: []
# - kind: ConfigMap
#   name: ca-cert
#   key: ca.crt
# - kind: ConfigMap
#   name: kube-root-ca.crt
#   key: ca.crt

exposed_ca:
  # none, configmap, secret, url, certmanager
  type: none
  configmap:
    namespace:
    name:
    key:
  secret:
    namespace:
    name:
    key:
  url: https://url.to.my.private.ca/raw

# GLOBAL INGRESS
ingress:
  tls:
    # type supported:
    # - none, tls will be disabled
    # - acme, cert-manager handle http01 challenge
    # - ca, cert-manger will use a secret you set in cert-manager namespace to build a PKI
    # - tlsSecret, use a wildcard/multi-host TLS key pair for ingresses, cert-manager not involved 
    type: none
    # https://cert-manager.io/docs/configuration/acme/http01/
    acme:
      email: yourpersonal@email.com
    # https://cert-manager.io/docs/configuration/ca/
    ca:
      secretName: a-secret-available # in cert-manager namespace
    # https://kubernetes.io/docs/concepts/configuration/secret/#tls-secrets
    tlsSecret:
      # name of the tls secret 
      name: wildcard-tls
      # method supported: 
      # in-namespace: you are in charge to replicate the secret in tools' namespaces
      # (NOT IMPLEMENTED YET) unique: secret is provisionned in a namespace and we will replicate it in tools' namespace, 'sourceNamespace' is required
      method: in-namespace
      sourceNamespace: default

  annotations: {} # map<string>: string
  labels: {} # map<string>: string

projectsRootDir:
  - forge

# PROXY
USE_PROXY: false
PROXY_HOST: "x.x.x.x"
PROXY_PORT: "xxxx"
HTTP_PROXY: http://{{ PROXY_HOST }}:{{ PROXY_PORT }}/
HTTPS_PROXY: http://{{ PROXY_HOST }}:{{ PROXY_PORT }}/
NO_PROXY: .cluster.local,.svc,10.0.0.0/8,127.0.0.1,192.168.0.0/16,localhost,svc.cluster.local,localdomain # change to your network environment

# DOMAIN
ROOT_DOMAIN: .mycompany.com

# ARGOCD
ARGOCD_NAMESPACE: argo-system
ARGOCD_DOMAIN: argo-system{{ ROOT_DOMAIN }}
ARGOCD_ADMIN_PASSWORD: AnotherSuperPassword

# CERT-MANAGER
CERTMANAGER_VERSION: v1.11.0

# CONSOLE
# deployed by Argo
CONSOLE_NAMESPACE: console-pi-system
CONSOLE_DOMAIN: console{{ ROOT_DOMAIN }}
CONSOLE_RELEASE: "3.3.1"
CONSOLE_DB_PASSWORD: WowAPassword

# GITLAB
GITLAB_NAMESPACE: gitlab-system
GITLAB_VERSION: "6.11.0"
# Optional, gitlab generate host automatically
# https://docs.gitlab.com/charts/charts/globals#configure-host-settings
# This variable force host for gitlab property (webservice)
GITLAB_DOMAIN: gitlab{{ ROOT_DOMAIN }}
# You can merge customs values for gitlab, it will be merged with roles/gitlab/templates/gitlab-instance.yaml.j2
# See https://gitlab.com/gitlab-org/charts/gitlab/-/blob/master/values.yaml
# And https://docs.gitlab.com/charts/charts/globals.html
GITLAB_VALUES: {}

# HARBOR
HARBOR_NAMESPACE: harbor-system
HARBOR_DOMAIN: harbor{{ ROOT_DOMAIN }}
HARBOR_ADMIN_PASSWORD: MySuperPassword
# You can merge customs values for harbor, it will be merged with roles/harbor/tasks/main.yaml
# See https://github.com/goharbor/harbor-helm
HARBOR_VALUES: {}

# KEYCLOAK
KEYCLOAK_NAMESPACE: keycloak-system
# Cannot be changed
KEYCLOAK_DOMAIN: keycloak{{ ROOT_DOMAIN }}

# NEXUS
NEXUS_NAMESPACE: nexus-system
NEXUS_DOMAIN: nexus{{ ROOT_DOMAIN }}
NEXUS_STORAGE_SIZE: 100Gi

# SONARQUBE
SONAR_NAMESPACE: sonar-system
SONAR_DOMAIN: sonar{{ ROOT_DOMAIN }}

# SOPS
SOPS_NAMESPACE: sops-system

# VAULT
VAULT_NAMESPACE: vault-system
VAULT_DOMAIN: vault{{ ROOT_DOMAIN }}
VAULT_VALUES: {}
