---
- name: Get kubernetes service
  kubernetes.core.k8s_info:
    namespace: default
    kind: Service
    name: kubernetes
  register: kubernetes_service_clusterip
  when: dsc.proxy.enabled

- name: Set envs fact
  ansible.builtin.set_fact:
    envs:
      - name: "{{ dsc_name }}"
        apps:
          - argocd_app: global
            clusterName: ""
            nameSpace: "global"
            customPrefix: ""
            syncWave: 10
            vault_values:
              vault_infra_token: "{{ vault_infra_token | default(lookup('ansible.builtin.env', 'VAULT_INFRA_TOKEN')) }}"
              image:
                repository:
                  docker: "{{ dsc.global.registry | default('docker.io') }}"
                  ghcr: "{{ dsc.global.registry | default('ghcr.io') }}"
                  gitlab: "{{ dsc.global.registry | default('registry.gitlab.com') }}"
                  gitlabOperator: "{{ dsc.global.registry | default('gitlab-org') }}"
                  minio: "{{ dsc.global.registry | default('minio') }}"
                  quay: "{{ dsc.global.registry | default('quay.io') }}"
              rootDomain: "{{ root_domain[1:] }}"
              domain:
                argocd: "{{ argocd_domain }}"
                console: "{{ console_domain }}"
                gitlab: "{{ gitlab_domain }}"
                grafana: "{{ grafana_domain }}"
                harbor: "{{ harbor_domain }}"
                harborNotary: "{{ dsc.harbor.subDomain }}-notary{{ root_domain }}"
                keycloak: "{{ keycloak_domain }}"
                nexus: "{{ nexus_domain }}"
                nexusDockerProxy: "{{ dsc.nexus.subDomain }}-docker-proxy{{ root_domain }}"
                observatorium: "{{ observatorium_domain }}"
                sonarqube: "{{ sonar_domain }}"
                vault: "{{ vault_domain }}"
              proxy:
                httpProxy: "{{ dsc.proxy.http_proxy | default('') }}"
                httpsProxy: "{{ dsc.proxy.https_proxy | default('') }}"
                noProxy: "{{ dsc.proxy.no_proxy | default('') }}"
                hostProxy: "{{ dsc.proxy.host | default('') }}"
                portProxy: "{{ dsc.proxy.port | default('') }}"
                kubeIp: "{{ kubernetes_service_clusterip.resources[0].spec.clusterIP | default('') }}"
              exposedCa: "{{ exposed_ca_pem | default('') }}"
              cnpgS3CaPem: "{{ cnpg_s3_ca_pem | default('') }}"
              ingressClassName: "{{ dsc.ingress.className | default('') }}"
              dockerAccount:
                username: "{{ dsc.global.dockerAccount.username | default('') }}"
                password: "{{ dsc.global.dockerAccount.password | default('') }}"
              backup:
                s3BucketName: "{{ dsc.global.backup.s3.bucketName | default('') }}"
                s3BucketPrefix: "{{ dsc.global.backup.vault.pathPrefix | default('') }}"
                s3Endpoint: "{{ dsc.global.backup.s3.endpointURL | default('') }}"
                s3AccessKey: "{{ dsc.global.backup.s3.credentials.accessKeyId.value | default('') }}"
                s3SecretKey: "{{ dsc.global.backup.s3.credentials.secretAccessKey.value | default('') }}"
                gitlab:
                  mcExtraArgs: "{{ dsc.global.backup.gitlab.mcExtraArgs | default('') }}"
                  pathPrefix: "{{ dsc.global.backup.gitlab.pathPrefix | default('') }}"
                  retentionPolicy: "{{ dsc.global.backup.gitlab.retentionPolicy | default('') }}"
          - argocd_app: certmanager
            clusterName: ""
            nameSpace: "certmanager"
            customPrefix: ""
            syncWave: 10
          - argocd_app: kyverno
            clusterName: ""
            nameSpace: "kyverno"
            customPrefix: ""
            syncWave: 10
          - argocd_app: keycloak
            clusterName: ""
            nameSpace: "keycloak"
            customPrefix: ""
            syncWave: 20
            vault_values:
              auth:
                adminPassword: >-
                  {{
                    (keycloak_admin_creds.resources[0].data['admin-password'] | b64decode
                     if (keycloak_admin_creds.resources[0].data['admin-password'] is defined and
                         keycloak_admin_creds.resources[0].data['admin-password'] | length > 0)
                     else lookup('ansible.builtin.password', '/dev/null', length=24, chars=['ascii_letters', 'digits']))
                  }}
              initcontainers:
                pluginDownloadUrl: "{{ dsc.keycloak.pluginDownloadUrl }}"
          - argocd_app: gitlab
            clusterName: ""
            nameSpace: "gitlab"
            customPrefix: ""
            syncWave: 30
            vault_values:
              cnpg:
                username: >-
                  {{
                    (pg_gitlab_db_secret.resources[0].data.username | b64decode)
                    if not dsc.gitlab.cnpg.initPassword
                    and pg_gitlab_db_secret is defined
                    and pg_gitlab_db_secret.resources | length > 0
                    else 'gitlab'
                  }}
                password: >-
                  {{
                    (pg_gitlab_db_secret.resources[0].data.password | b64decode)
                    if not dsc.gitlab.cnpg.initPassword
                    and pg_gitlab_db_secret is defined
                    and pg_gitlab_db_secret.resources | length > 0
                    else lookup('ansible.builtin.password', '/dev/null', length=24, chars=['ascii_letters', 'digits'])
                  }}
                database: >-
                  {{
                    (pg_gitlab_db_secret.resources[0].data.dbname | b64decode)
                    if not dsc.gitlab.cnpg.initPassword
                    and pg_gitlab_db_secret is defined
                    and pg_gitlab_db_secret.resources | length > 0
                    else 'gitlabhq_production'
                  }}
              gitlab:
                toolbox:
                  backups:
                    cron:
                      enabled: "{{ dsc.global.backup.gitlab.enabled | default('false') }}"
                      schedule: "{{ dsc.global.backup.gitlab.cron | default('0 */6 * * *') }}"
                      extraArgs: "{{ dsc.global.backup.gitlab.extraArgs | default('') }}"
              gitlabToken: ""
              runnerToken: ""
          - argocd_app: glexporter
            clusterName: ""
            nameSpace: "gitlab"
            customPrefix: ""
            syncWave: 40
          - argocd_app: gitlabrunner
            clusterName: ""
            nameSpace: "gitlab"
            customPrefix: ""
            syncWave: 40
          - argocd_app: vault
            clusterName: ""
            nameSpace: "vault"
            customPrefix: ""
            syncWave: 40
            vault_values:
              vaultToken: >-
                {{
                  (vault_keys.resources[0].data.root_token)
                  if vault_keys.resources[0].data.root_token is defined and
                  vault_keys.resources[0].data.root_token | length > 0
                  else ''
                }}
          - argocd_app: harbor
            clusterName: ""
            nameSpace: "harbor"
            customPrefix: ""
            syncWave: 50
            vault_values:
              global:
                harborAdminPassword: "{{ dsc.harbor.adminPassword | default(lookup('ansible.builtin.password', '/dev/null', length=24, chars=['ascii_letters', 'digits'])) }}"
                s3ImageChartStorage:
                  bucket: "{{ dsc.harbor.s3ImageChartStorage.bucket | default('') }}"
                  region: "{{ dsc.harbor.s3ImageChartStorage.region | default('') }}"
                  regionendpoint: "{{ dsc.harbor.s3ImageChartStorage.regionendpoint | default('') }}"
                  accesskey: "{{ dsc.harbor.s3ImageChartStorage.accesskey | default('') }}"
                  secretkey: "{{ dsc.harbor.s3ImageChartStorage.secretkey | default('') }}"
          - argocd_app: argocd
            clusterName: ""
            nameSpace: "argocd"
            customPrefix: ""
            syncWave: 50
            vault_values:
              argocdServerAdminPassword: "{{ dsc.argocd.admin.password | default(lookup('ansible.builtin.password', '/dev/null', length=24, chars=['ascii_letters', 'digits'])) }}"
          - argocd_app: nexus
            clusterName: ""
            nameSpace: "nexus"
            customPrefix: ""
            syncWave: 50
            vault_values:
              auth:
                adminUsername: "admin"
                adminPassword: "{{ lookup('ansible.builtin.password', '/dev/null', length=24, chars=['ascii_letters', 'digits']) }}"
          - argocd_app: sonarqube
            clusterName: ""
            nameSpace: "sonarqube"
            customPrefix: ""
            syncWave: 50
            vault_values:
              auth:
                adminPassword: >-
                  {{
                    (sonarqube_secret.resources[0].data.password | b64decode
                     if (sonarqube_secret.resources[0].data.password is defined and
                         sonarqube_secret.resources[0].data.password | length > 0)
                     else lookup('ansible.builtin.password', '/dev/null', length=24, chars=['ascii_letters', 'digits', 'punctuation']))
                  }}
                monitoringPassword: "{{ lookup('ansible.builtin.password', '/dev/null', length=24, chars=['ascii_letters', 'digits']) }}"
                sonarApiToken: >-
                  {{
                    (token_pass.json.token)if token_pass is defined and
                    token_pass.json.token | length > 0
                    else ''
                  }}
          - argocd_app: console
            clusterName: ""
            nameSpace: "console"
            customPrefix: ""
            syncWave: 60
            vault_values:
              uri: >-
                {{
                  (pg_console_db_secret.resources[0].data.uri | b64decode)
                  if pg_console_db_secret is defined and
                  pg_console_db_secret.resources | length > 0
                  else ''
                }}
          - argocd_app: observability
            clusterName: "in-cluster"
            nameSpace: "argo"
            customPrefix: "infra-"
            syncWave: 60
            vault_values:
              api:
                loglevel: info
                config:
                  id: "prod-infra"
                  name: "prod-infra"
              logs:
                enabled: "{{ dsc.global.logs.enabled | default('') }}"
                endpoint: "{{ dsc.global.logs.endpoint | default('') }}"
              metrics:
                enabled: "{{ dsc.global.metrics.enabled | default('') }}"
                endpoint: "{{ dsc.global.metrics.endpoint | default('') }}"
