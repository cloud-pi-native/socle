- name: Set some facts
  ansible.builtin.set_fact:
    vault_auth_path: jwt
    vault_auth_role: default-ci
    npm_file: "{{ lookup('ansible.builtin.template', 'npm_file.j2') }}"
    mvn_config_file: "{{ lookup('ansible.builtin.template', 'mvn_conf_file.j2') }}"

- name: Test GitLab token
  when: set_token_inv.skipped is not defined
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: https://{{ gitlab_domain }}/api/v4/admin/ci/variables
    headers:
      PRIVATE-TOKEN: "{{ gitlab_token }}"
  register: test_token
  ignore_errors: true

- name: Initialize GitLab token
  when: (set_token_inv.skipped is defined and set_token_inv.skipped) or (test_token.status != 200)
  block:
    - name: Get toolbox pod name
      kubernetes.core.k8s_info:
        kind: pod
        label_selectors:
          - app = toolbox
        namespace: "{{ dsc.gitlab.namespace }}"
      register: toolbox_pods

    - name: Set toolbox pod name
      ansible.builtin.set_fact:
        tb_pod: "{{ toolbox_pods.resources[0].metadata.name }}"

    - name: Create Token
      kubernetes.core.k8s_exec:
        pod: "{{ tb_pod }}"
        namespace: "{{ dsc.gitlab.namespace }}"
        command: >
          bash -c "echo 'PersonalAccessToken.create!(user_id: 1
          , name: \"ANSIBLE-DSO\"
          , scopes: [:api, :read_repository, :write_repository, :create_runner]
          , expires_at: 365.days.from_now).token' | gitlab-rails console"
      register: token

    - name: Set new GitLab token
      ansible.builtin.set_fact:
        gitlab_token: "{{ token.stdout_lines[-2][1:-1] }}"

- name: Get settings
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: https://{{ gitlab_domain }}/api/v4/application/settings
    headers:
      PRIVATE-TOKEN: "{{ gitlab_token }}"
  register: get_settings
  ignore_errors: true

- name: Set some parameters
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: https://{{ gitlab_domain }}/api/v4/application/settings
    method: PUT
    headers:
      PRIVATE-TOKEN: "{{ gitlab_token }}"
    body:
      signup_enabled: false
      outbound_local_requests_allowlist_raw: "0.0.0.0/0"
      default_branch_protection: 0
      import_sources:
        - git
    body_format: form-urlencoded
  changed_when: true

- name: Set parent group name
  ansible.builtin.set_fact:
    index: "0"
    parent: ""

- name: Include create group
  ansible.builtin.include_tasks:
    file: create-group.yaml

- name: Set or update some CI/CD variables
  community.general.gitlab_group_variable:
    api_url: https://{{ gitlab_domain }}
    api_token: "{{ gitlab_token }}"
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    group: "{{ dsc.global.projectsRootDir | join('/') }}"
    purge: false
    variables:
      - name: ROOT_DOMAIN
        value: "{{ dsc.global.rootDomain }}"
      - name: VAULT_KV
        value: forge-dso
      - name: CATALOG_PATH
        value: "{{ dsc.global.projectsRootDir | join('/') }}/catalog"
      - name: PROJECTS_ROOT_DIR
        value: "{{ dsc.global.projectsRootDir | join('/') }}"
      - name: NEXUS_HOST_URL
        value: https://{{ nexus_domain }}
      - name: NEXUS_HOSTNAME
        value: "{{ nexus_domain }}"
      - name: SONAR_HOST_URL
        value: https://{{ sonar_domain }}
      - name: VAULT_AUTH_PATH
        value: "{{ vault_auth_path }}"
      - name: VAULT_AUTH_ROLE
        value: "{{ vault_auth_role }}"
      - name: VAULT_SERVER_URL
        value: https://{{ vault_domain }}
      - name: MVN_CONFIG_FILE
        variable_type: file
        value: "{{ mvn_config_file }}"
      - name: NPM_FILE
        variable_type: file
        value: "{{ npm_file }}"

- name: Set or update proxy CI/CD variables
  community.general.gitlab_group_variable:
    api_url: https://{{ gitlab_domain }}
    api_token: "{{ gitlab_token }}"
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    group: "{{ dsc.global.projectsRootDir | join('/') }}"
    purge: false
    state: "{{ dsc.proxy.enabled | ternary('present', 'absent') }}"
    variables:
      - name: HTTP_PROXY
        value: "{{ dsc.proxy.http_proxy | default('') }}"
      - name: HTTPS_PROXY
        value: "{{ dsc.proxy.https_proxy | default('') }}"
      - name: NO_PROXY
        value: "{{ dsc.proxy.no_proxy | default('') }}"
      - name: PROXY_HOST
        value: "{{ dsc.proxy.host | default('') }}"
      - name: PROXY_PORT
        value: "{{ dsc.proxy.port | default('') }}"
      - name: http_proxy
        value: "{{ dsc.proxy.http_proxy | default('') }}"
      - name: https_proxy
        value: "{{ dsc.proxy.https_proxy | default('') }}"
      - name: no_proxy
        value: "{{ dsc.proxy.no_proxy | default('') }}"

- name: Set or update CA_BUNDLE variable
  community.general.gitlab_group_variable:
    api_url: https://{{ gitlab_domain }}
    api_token: "{{ gitlab_token }}"
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    group: "{{ dsc.global.projectsRootDir | join('/') }}"
    purge: false
    state: "{{ dsc.additionalsCA | ternary('present', 'absent') }}"
    variables:
      - name: CA_BUNDLE
        value: "{{ [additionals_ca_pem, exposed_ca_pem] | join('\n') }}"
        variable_type: file

- name: Append registry mirror arguments to extra_kaniko_args
  ansible.builtin.set_fact:
    extra_kaniko_args: "{{ extra_kaniko_args | default('') }} --registry-mirror {{ harbor_domain | regex_replace('^https?://', '') }}/{{ item.name }}"
  loop: "{{ dsc.harbor.proxyCache }}"
  when: dsc.harbor.proxyCache is defined
  no_log: true

- name: Set or update insecure args variables
  community.general.gitlab_group_variable:
    api_url: https://{{ gitlab_domain }}
    api_token: "{{ gitlab_token }}"
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    group: "{{ dsc.global.projectsRootDir | join('/') }}"
    purge: false
    state: "{{ dsc.gitlab.insecureCI | ternary('present', 'absent') }}"
    variables:
      - name: EXTRA_KANIKO_ARGS
        value: --skip-tls-verify {{ extra_kaniko_args | default('') }}
      - name: EXTRA_GIT_ARGS
        value: -c http.sslVerify=false
      - name: EXTRA_VAULT_ARGS
        value: -tls-skip-verify

- name: Set or update additional CI/CD variables
  community.general.gitlab_group_variable:
    api_url: https://{{ gitlab_domain }}
    api_token: "{{ gitlab_token }}"
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    group: "{{ dsc.global.projectsRootDir | join('/') }}"
    purge: false
    variables:
      - name: "{{ item.name }}"
        value: "{{ item.value }}"
        masked: "{{ item.masked }}"
        protected: "{{ item.protected }}"
  with_items: "{{ dsc.gitlab.extraCIVars }}"

- name: Wait gitlab-webservice-default endpoint
  kubernetes.core.k8s_info:
    kind: Endpoints
    namespace: "{{ dsc.gitlab.namespace }}"
    name: gitlab-webservice-default
  register: endpoint
  until: endpoint.resources[0].subsets[0].addresses[0] is defined
  retries: 15
  delay: 5

# Retrieve Vault Infra token

- name: Get Vault Infra token
  when: lookup('ansible.builtin.env', 'VAULT_INFRA_TOKEN') != ''
  ansible.builtin.set_fact:
    vault_infra_token: "{{ lookup('ansible.builtin.env', 'VAULT_INFRA_TOKEN') }}"

- name: Get Vault Infra keys and token
  when: lookup('ansible.builtin.env', 'VAULT_INFRA_TOKEN') == ''
  block:
    - name: Get Vault Infra secrets
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_infra }}"
        proxy: "{{ kubeconfig_proxy_infra | default('')}}"
        namespace: "{{ dsc.vaultInfra.namespace }}"
        kind: Secret
      register: vault_infra_secrets

    - name: Set vault_infra_keys_secret_name
      ansible.builtin.set_fact:
        vault_infra_keys_secret_name: "{{ vault_infra_secrets.resources
          | selectattr('metadata.name', 'contains', 'vault-keys')
          | map(attribute='metadata.name') | first }}"

    - name: Get Vault Infra keys
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_infra }}"
        proxy: "{{ kubeconfig_proxy_infra | default('')}}"
        namespace: "{{ dsc.vaultInfra.namespace }}"
        kind: Secret
        name: "{{ vault_infra_keys_secret_name }}"
      register: vault_infra_keys

    - name: Get Vault Infra token
      ansible.builtin.set_fact:
        vault_infra_token: "{{ vault_infra_keys.resources[0].data.root_token | b64decode }}"

- name: Get runner token from infra Vault
  block:
    - name: Retrieve GitLab values from infra Vault
      community.hashi_vault.vault_kv2_get:
        validate_certs: "{{ vaultinfra_cert_valid }}"
        url: "https://{{ vaultinfra_domain }}"
        auth_method: token
        token: "{{ vault_infra_token }}"
        engine_mount_point: "{{ vaultinfra_kv_name }}"
        path: "env/{{ dsc_name }}/apps/gitlab/values"
      register: gitlab_vault_values
      ignore_errors: true

    - name: Set runner_token and gitlab_token facts
      when: gitlab_vault_values.data.data.runnerToken is defined
      ansible.builtin.set_fact:
        runner_token: "{{ gitlab_vault_values.data.data.runnerToken }}"

- name: Check if GitLab Runner is installed
  block:
    - name: Get GitLab Runner deployment
      kubernetes.core.k8s_info:
        kind: Deployment
        name: gitlab-runner
        namespace: "{{ dsc.gitlab.namespace }}"
        api_version: apps/v1
      register: grunner_deploy
      ignore_errors: true

    - name: Set grunner_installed fact
      ansible.builtin.set_fact:
        grunner_installed: "{{ grunner_deploy.resources | length > 0 }}"

- name: Get GitLab online admin runners
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: https://{{ gitlab_domain }}/api/v4/runners/all?status=online
    method: GET
    headers:
      PRIVATE-TOKEN: "{{ gitlab_token }}"
    body_format: json
    status_code: [200]
  register: online_admin_runners

- name: Set dso_runner fact
  when: online_admin_runners.json | length > 0
  ansible.builtin.set_fact:
    dso_runner: "{{ online_admin_runners.json | selectattr('description', 'contains', 'dso-runner') | last }}"

- name: Initiate dso-runner in GitLab instance
  when: |
    (dso_runner is not defined) or
    (runner_token is defined and runner_token | length == 0) or
    (not grunner_installed)
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: https://{{ gitlab_domain }}/api/v4/user/runners
    method: POST
    headers:
      PRIVATE-TOKEN: "{{ gitlab_token }}"
    body:
      runner_type: instance_type
      description: dso-runner
      platform:
      run_untagged: true
    body_format: form-urlencoded
    status_code: [201]
  changed_when: true
  register: default_runner

- name: Get and delete old admin runners
  when: |
    default_runner is skipped and
    dso_runner is defined
  block:
    - name: Get all GitLab admin runners
      ansible.builtin.uri:
        validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
        url: https://{{ gitlab_domain }}/api/v4/runners/all
        method: GET
        headers:
          PRIVATE-TOKEN: "{{ gitlab_token }}"
        body_format: json
        status_code: [200]
      register: admin_runners

    - name: Set old admin runners fact
      ansible.builtin.set_fact:
        old_admin_runners: "{{ admin_runners.json | selectattr('id', '!=', dso_runner.id) }}"

    - name: Delete old admin runners
      when: old_admin_runners | length > 0
      ansible.builtin.uri:
        validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
        url: "https://{{ gitlab_domain }}/api/v4/runners/{{ item }}"
        method: DELETE
        headers:
          PRIVATE-TOKEN: "{{ gitlab_token }}"
        status_code: [204]
      changed_when: true
      loop: "{{ old_admin_runners | map(attribute='id') }}"

- name: Delete deprecated dso-runner
  when: |
    default_runner is not skipped and
    dso_runner is defined
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "https://{{ gitlab_domain }}/api/v4/runners/{{ dso_runner.id }}"
    method: DELETE
    headers:
      PRIVATE-TOKEN: "{{ gitlab_token }}"
    status_code: [204]
  changed_when: true

# We need this task here because default_runner is always registered, even when skipped.
# Without the task below, it would otherwise become empty when skipped.

- name: Keep runner token from infra Vault if default_runner was skipped
  when: |
    default_runner is skipped and
    (runner_token is defined and runner_token | length > 0)
  ansible.builtin.set_fact:
    default_runner:
      json:
        token: "{{ runner_token }}"
