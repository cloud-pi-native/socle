crds:
  install: true
  keep: true
{% if dsc.global.platform == "openshift" %}
openshift:
  enabled: true
{% endif %}
configs:
{% if dsc.argocdInfra.admin.enabled %}
  secret:
    argocdServerAdminPassword: "{{ dsc.argocdInfra.admin.password }}"
{% endif %}
  params:
    server.insecure: true
  rbac:
    policy.csv: |
      p, role:admin, *, *, */*, allow
      p, role:nada, applicationsets, *, */*, deny
      p, role:nada, applications, *, */*, deny
      p, role:nada, logs, *, */*, deny
      p, role:nada, exec, *, */*, deny
      p, role:nada, certificates, *, *, deny
      p, role:nada, accounts, *, *, deny
      p, role:nada, gpgkeys, *, *, deny
      p, role:nada, projects, *, *, deny
      p, role:nada, clusters, *, *, deny
      p, role:nada, repositories, get, *, allow
      g, system:cluster-admins, role:admin
      g, cluster-admins, role:admin
      g, /ArgoCDAdmins, role:admin
      g, ArgoCDAdmins, role:admin
{% if dsc.global.environment == 'development' %}
      p, cpin-sa, applications, *, *, allow
{% endif %}
    scopes: "[groups]"
    policy.default: role:nada
    admin.enabled: "false"
  cm:
{% if instance_name != "conf-dso" %}
    application.instanceLabelKey: argocd.argoproj.io/instance.{{ instance_name }}
{% endif %}
    clusterResources: "true"
    url: "https://{{ argocdinfra_domain }}"
    oidc.config: |
      issuer: https://{{ keycloakinfra_domain }}/realms/infra
      requestedScopes: ["openid", "generic"]
      name: Keycloak
      clientID: {{ argocd_secret.resources[0].data.CLIENT_ID | b64decode }}
      clientSecret: {{ argocd_secret.resources[0].data.CLIENT_SECRET | b64decode }}
{% if dsc.exposedCA.type != 'none' %}
      rootCA: |
        {{ exposed_ca_pem | indent(width=8, first=False) }}
{% endif %}
    users.anonymous.enabled: "false"
    admin.enabled: "{{ dsc.argocdInfra.admin.enabled }}"
    kustomize.buildOptions: "--enable-helm"
    resource.customizations.useOpenLibs.apps.gitlab.com_GitLab: true
    resource.customizations.health.apps.gitlab.com_GitLab: |
      health_status = {}
      health_status.status = "Progressing"
      health_status.message = "Gitlab is Preparing"
      if obj.status ~= nil then
        if obj.status.phase ~= nil then
          if obj.status.phase == "Running" then
            health_status.status = "Healthy"
            health_status.message = "Gitlab is Running"
          end
        end
      end
      return health_status
    resource.exclusions: |
      - apiGroups:
        - tekton.dev
        clusters:
        - '*'
        kinds:
        - TaskRun
        - PipelineRun
{% if dsc.global.environment == 'development' %}
    accounts.cpin-sa: apiKey
{% endif %}
redis-ha:
  enabled: true
  image:
    repository: docker.io/library/redis
    tag: 7.4.1-alpine
controller:
  replicas: 3
dex:
  enabled: false
server:
  replicas: 3
  ingress:
    ingressClassName: {{ dsc.ingress.className | default('') }}
  ingressGrpc:
    ingressClassName: {{ dsc.ingress.className | default('') }}
repoServer:
  replicas: 3
{% if dsc.global.dockerAccount.enabled %}
  env:
  - name: HELM_USER
    valueFrom:
      secretKeyRef:
        name: helm-docker-registry-secret
        key: username
  - name: HELM_PASSWORD
    valueFrom:
      secretKeyRef:
        name: helm-docker-registry-secret
        key: password
{% endif %}
  initContainers:
{% if dsc.global.dockerAccount.enabled %}
  - name: helm-login
    image: quay.io/argoproj/argocd:{{ argo_app_version }}
    command: ["sh", "-c"]
    args:
      - |
        cp /usr/local/bin/helm /helm-custom-binary/helm.bin;
        cat <<'EOF' > /helm-custom-binary/helm
        #!/usr/bin/env bash
        args=($@)
        if [ "$#" -gt 2 ] && [ $1 == "registry" ] && { [ "$2" = "login" ] || [ "$2" = "logout" ]; } && [ $3 == "registry-1.docker.io/bitnamicharts" ]; then
          args[2]="registry-1.docker.io"
        fi
        helm.bin ${args[@]}
        EOF
        chmod +x /helm-custom-binary/helm;
        echo $HELM_PASSWORD | helm registry login -u $HELM_USER registry-1.docker.io --password-stdin;
    volumeMounts:
    - mountPath: /helm-working-dir
      name: helm-working-dir
    - mountPath: /helm-custom-binary
      name: helm-custom-binary
{% if dsc.global.platform != "openshift" %}
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: false
      runAsNonRoot: true
      runAsUser: 999 
      seccompProfile:
        type: RuntimeDefault
{% endif %}
{% if dsc.global.dockerAccount.enabled %}
    env:
    - name: HELM_USER
      valueFrom:
        secretKeyRef:
          name: helm-docker-registry-secret
          key: username
    - name: HELM_PASSWORD
      valueFrom:
        secretKeyRef:
          name: helm-docker-registry-secret
          key: password
{% endif %}
    - name: HELM_CACHE_HOME
      value: /helm-working-dir
    - name: HELM_CONFIG_HOME
      value: /helm-working-dir
    - name: HELM_DATA_HOME
      value: /helm-working-dir
{% if dsc.proxy.enabled %}
    - name: HTTP_PROXY
      value: "{{ dsc.proxy.http_proxy }}"
    - name: HTTPS_PROXY
      value: "{{ dsc.proxy.https_proxy }}"
    - name: NO_PROXY
      value: "{{ dsc.proxy.no_proxy }},{{ dsc_name }}-argo-infra-argocd-repo-server"
{% endif %}
{% endif %}
  - name: download-tools
    image: registry.access.redhat.com/ubi8
{% if dsc.global.platform != "openshift" %}
    securityContext:
      runAsNonRoot: true
      runAsUser: 999
      runAsGroup: 999
      fsGroup: 999
{% endif %}
    env:
    - name: AVP_VERSION
      value: {{ dsc.argocdInfra.vaultPluginVersion }}
{% if dsc.proxy.enabled %}
    - name: HTTP_PROXY
      value: "{{ dsc.proxy.http_proxy }}"
    - name: HTTPS_PROXY
      value: "{{ dsc.proxy.https_proxy }}"
    - name: NO_PROXY
      value: "{{ dsc.proxy.no_proxy }},{{ dsc_name }}-argo-infra-argocd-repo-server"
{% endif %}
    command: [sh, -c]
    args:
    - >-
      OS="$(uname | tr '[:upper:]' '[:lower:]')" && [ "$(uname -m)" = "aarch64" ] && ARCH="arm64" || ARCH="amd64" &&
      curl -L https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v$(AVP_VERSION)/argocd-vault-plugin_$(AVP_VERSION)_${OS}_${ARCH} -o /custom-tools/argocd-vault-plugin &&
      chmod +x /custom-tools/argocd-vault-plugin
    volumeMounts:
    - mountPath: /custom-tools
      name: custom-tools
  extraContainers:
  - name: avp
    command: [/var/run/argocd/argocd-cmp-server]
    image: quay.io/argoproj/argocd:{{ argo_app_version }}
{% if dsc.global.platform != "openshift" %}
    securityContext:
      runAsNonRoot: true
      runAsUser: 999
      runAsGroup: 999
      fsGroup: 999
{% endif %}
    env:
    - name: HELM_CACHE_HOME
      value: /helm-working-dir
    - name: HELM_CONFIG_HOME
      value: /helm-working-dir
    - name: HELM_DATA_HOME
      value: /helm-working-dir
{% if dsc.proxy.enabled %}
    - name: HTTP_PROXY
      value: "{{ dsc.proxy.http_proxy }}"
    - name: HTTPS_PROXY
      value: "{{ dsc.proxy.https_proxy }}"
    - name: NO_PROXY
      value: "{{ dsc.proxy.no_proxy }},{{ dsc_name }}-argo-infra-argocd-repo-server"
{% endif %}
    - name: VAULT_SKIP_VERIFY
      value: "true"
    envFrom:
    - secretRef:
        name: vault-plugin-secret
    volumeMounts:
    - mountPath: /helm-working-dir
      name: helm-working-dir
    - mountPath: /var/run/argocd
      name: var-files
    - mountPath: /home/argocd/cmp-server/plugins
      name: plugins
    - mountPath: /tmp
      name: tmp
    # Register plugins into sidecar
    - mountPath: /home/argocd/cmp-server/config/plugin.yaml
      subPath: avp.yaml
      name: cmp-plugin
    # Important: Mount tools into $PATH
    - name: custom-tools
      subPath: argocd-vault-plugin
      mountPath: /usr/local/bin/argocd-vault-plugin
  - name: avp-helm
    command: [/var/run/argocd/argocd-cmp-server]
    image: quay.io/argoproj/argocd:{{ argo_app_version }}
{% if dsc.global.platform != "openshift" %}
    securityContext:
      runAsNonRoot: true
      runAsUser: 999
      runAsGroup: 999
      fsGroup: 999
{% endif %}
    env:
    - name: HELM_CACHE_HOME
      value: /helm-working-dir
    - name: HELM_CONFIG_HOME
      value: /helm-working-dir
    - name: HELM_DATA_HOME
      value: /helm-working-dir
{% if dsc.proxy.enabled %}
    - name: HTTP_PROXY
      value: "{{ dsc.proxy.http_proxy }}"
    - name: HTTPS_PROXY
      value: "{{ dsc.proxy.https_proxy }}"
    - name: NO_PROXY
      value: "{{ dsc.proxy.no_proxy }},{{ dsc_name }}-argo-infra-argocd-repo-server"
{% endif %}
    - name: VAULT_SKIP_VERIFY
      value: "true" 
    envFrom:
    - secretRef:
        name: vault-plugin-secret
    volumeMounts:
    - mountPath: /helm-working-dir
      name: helm-working-dir
    - mountPath: /var/run/argocd
      name: var-files
    - mountPath: /home/argocd/cmp-server/plugins
      name: plugins
    - mountPath: /tmp
      name: tmp
    # Register plugins into sidecar
    - mountPath: /home/argocd/cmp-server/config/plugin.yaml
      subPath: avp-helm.yaml
      name: cmp-plugin
    # Important: Mount tools into $PATH
    - name: custom-tools
      subPath: argocd-vault-plugin
      mountPath: /usr/local/bin/argocd-vault-plugin
  - name: avp-kustomize
    command: [/var/run/argocd/argocd-cmp-server]
    image: quay.io/argoproj/argocd:{{ argo_app_version }}
{% if dsc.global.platform != "openshift" %}
    securityContext:
      runAsNonRoot: true
      runAsUser: 999
      runAsGroup: 999
      fsGroup: 999
{% endif %}
    env:
    - name: HELM_CACHE_HOME
      value: /helm-working-dir
    - name: HELM_CONFIG_HOME
      value: /helm-working-dir
    - name: HELM_DATA_HOME
      value: /helm-working-dir
{% if dsc.proxy.enabled %}
    - name: HTTP_PROXY
      value: "{{ dsc.proxy.http_proxy }}"
    - name: HTTPS_PROXY
      value: "{{ dsc.proxy.https_proxy }}"
    - name: NO_PROXY
      value: "{{ dsc.proxy.no_proxy }},{{ dsc_name }}-argo-infra-argocd-repo-server"
{% endif %}
    - name: VAULT_SKIP_VERIFY
      value: "true" 
    envFrom:
    - secretRef:
        name: vault-plugin-secret
    volumeMounts:
    - mountPath: /helm-working-dir
      name: helm-working-dir
    - mountPath: /var/run/argocd
      name: var-files
    - mountPath: /home/argocd/cmp-server/plugins
      name: plugins
    - mountPath: /tmp
      name: tmp
    # Register plugins into sidecar
    - mountPath: /home/argocd/cmp-server/config/plugin.yaml
      subPath: avp-kustomize.yaml
      name: cmp-plugin
    # Important: Mount tools into $PATH
    - name: custom-tools
      subPath: argocd-vault-plugin
      mountPath: /usr/local/bin/argocd-vault-plugin
  volumes:
  - configMap:
      name: cmp-plugin
    name: cmp-plugin
  - name: custom-tools
    emptyDir: {}
  - name: helm-custom-binary
    emptyDir: {}
  volumeMounts:
  - name: helm-custom-binary
    mountPath: /usr/local/bin/helm
    subPath: helm
  - name: helm-custom-binary
    mountPath: /usr/local/bin/helm.bin
    subPath: helm.bin
applicationSet:
  enabled: false
  replicas: 2
  webhook:
    ingress:
      ingressClassName: {{ dsc.ingress.className | default('') }}
notifications:
  enabled: false
  webhook:
    ingress:
      ingressClassName: {{ dsc.ingress.className | default('') }}
