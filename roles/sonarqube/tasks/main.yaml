- name: Create "{{ DSC.sonarqube.namespace }}" namespace
  kubernetes.core.k8s:
    kind: Namespace
    name: "{{ DSC.sonarqube.namespace }}"

- name: Get dso-postgres-secret
  kubernetes.core.k8s_info:
    kind: Secret
    name: dso-postgres-secret
    namespace: "{{ DSC.sonarqube.namespace }}"
  register: dso_postgres_secret

- name: Create dso-postgres-secret values
  when: dso_postgres_secret.resources | length == 0
  block:
    - name: Set postgres login
      set_fact:
        postgres_admin_user: admin-dso
        postgres_admin_password: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters') }}"

    - name: Create dso-postgres-secret
      kubernetes.core.k8s:
        definition:
          kind: Secret
          metadata:
            name: dso-postgres-secret
            namespace: "{{ DSC.sonarqube.namespace }}"
          data:
            POSTGRES_ADMIN_USER: "{{ postgres_admin_user | b64encode }}"
            POSTGRES_ADMIN_PASSWORD: "{{ postgres_admin_password | b64encode }}"

- name: Install sonar
  kubernetes.core.k8s:
    template: "{{ item }}"
  with_items:
    - postgres-pv-claim.yaml.j2
    - postgres-deployment.yaml.j2
    - postgres-service.yaml.j2
    - sonar-pv-claim.yaml.j2
    - sonar-deployment.yaml.j2
    - sonar-service.yaml.j2
    - sonar-ingress.yaml.j2

- name: Find Sonarqube admin password
  kubernetes.core.k8s_info:
    namespace: "{{ DSC.console.namespace }}"
    kind: ConfigMap
    name: dso-config
  register: ansible_inventory

- name: Reset admin password
  when: ansible_inventory.resources[0].data.SONAR_API_TOKEN is undefined
  block:
    - name: Missing Token disclaimer
      debug:
        msg: "Impossible de retrouver le TOKEN du compte admin, initialisation en cours â€¦"

    - name: Wait sonar endpoint to initialize
      kubernetes.core.k8s_info:
        kind: Endpoints
        namespace: "{{ DSC.sonarqube.namespace }}"
        name: sonar
      register: endpoint
      until: endpoint.resources[0].subsets is defined and endpoint.resources[0].subsets | selectattr('addresses')
      retries: 30
      delay: 5

    - name: Wait postgres endpoint to initialize
      kubernetes.core.k8s_info:
        kind: Endpoints
        namespace: "{{ DSC.sonarqube.namespace }}"
        name: postgres
      register: pg_ep

    - name: Set pg_pod
      set_fact:
        pg_pod: "{{ pg_ep.resources[0].subsets[0].addresses[0].targetRef.name }}"

    - name: Get admin account
      kubernetes.core.k8s_exec:
        pod: "{{ pg_pod }}"
        namespace: "{{ DSC.sonarqube.namespace }}"
        command: psql -d sonardb -U dso_admin -c "{{ query }}" -t
      vars:
        query: select row_to_json(row) from (SELECT * FROM  users WHERE login = 'admin') row;
      register: admin_account
      until: "admin_account is not failed"
      retries: 10
      delay: 5

    - name: Generate random password
      set_fact:
        admin: "{{ admin_account.stdout | from_json }}"
        token_pass: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters') }}"
      until: "admin is defined and token_pass is defined"
      retries: 5
      delay: 5

    - name: Get sha384sum of token
      shell: "echo -n {{ token_pass }} | sha384sum | awk '{ print $1 }'"
      register: token_sha
      changed_when: true

    - name: Adding admin token
      kubernetes.core.k8s_exec:
        pod: "{{ pg_pod }}"
        namespace: "{{ DSC.sonarqube.namespace }}"
        command: psql -d sonardb -U dso_admin -c "{{ query }}" -t
      vars:
        query: >
          INSERT INTO user_tokens
          (uuid, user_uuid, "name", token_hash, last_connection_date, created_at, project_key, "type", expiration_date)
          VALUES('mysuperuuid', '{{ admin.uuid }}', 'DSO', '{{ token_sha.stdout_lines[0] }}', null, 0, '', 'USER_TOKEN', null)
          ON CONFLICT(uuid) DO UPDATE SET token_hash = '{{ token_sha.stdout_lines[0] }}';
      register: admin_token_check
      until: "admin_token_check is not failed"
      retries: 5
      delay: 5

    - name: Update inventory
      kubernetes.core.k8s:
        kind: ConfigMap
        name: dso-config
        namespace: "{{ DSC.console.namespace }}"
        state: patched
        definition:
          data:
            SONAR_API_TOKEN: "{{ token_pass }}"

    - name: Reset password disclaimer
      debug:
        msg: /!\ PLEASE ENSURE YOU RESET ADMIN PASSWORD /!\
