---
- name: Get credentials
  hosts: localhost
  gather_facts: false
  tasks:

    - name: Display tags list
      ansible.builtin.debug:
        msg:
          - "List of available tags for convenience"
          - "(Can also be retrieved with the --list-tags option on ansible-playbook run) :"
          - ""
          - "keycloak"
          - "keycloak-infra"
          - "nexus"
          - "sonar (or sonarqube)"
          - "gitlab"
          - "vault"
          - "vault-infra"
          - "argo (or argocd)"
          - "argo-infra (or argocd-infra)"
          - "harbor"
          - "console (or console-dso)"
          - "grafana"
      tags:
        - always

    - name: "Get socle config from conf-dso dsc (default)"
      kubernetes.core.k8s_info:
        kind: dsc
        name: conf-dso
        api_version: cloud-pi-native.fr/v1alpha
      register: socle_config
      tags:
        - always

    - name: Get socle config from dsc_cr extra var when defined
      when: dsc_cr is defined
      kubernetes.core.k8s_info:
        kind: dsc
        name: "{{ dsc_cr }}"
        api_version: cloud-pi-native.fr/v1alpha
      register: socle_config_custom
      tags:
        - always

    - name: Check socle_config_custom and exit if empty
      when: (dsc_cr is defined) and (socle_config_custom.resources | length == 0)
      tags:
        - always
      block:
        - name: Warning message
          ansible.builtin.debug:
            msg:
              - "Attention ! Vous avez lancé le playbook avec l'option '-e dsc_cr={{ dsc_cr }}'"
              - "mais la ressource dsc nommée '{{ dsc_cr }}' est vide ou inexistante côté cluster !"
              - ""
              - "Vérifiez que vous ne vous êtes pas trompé de nom et que la ressource existe bien, via la commande suivante :"
              - ""
              - " kubectl get dsc {{ dsc_cr }} "
              - ""
              - "Si elle n'est pas trouvée (not found), listez simplement les resources dsc actuellement déclarées :"
              - ""
              - " kubectl get dsc "
              - ""
              - "Puis relancez le playbook avec une resource dsc existante."
              - ""
              - "Rappel : le présent playbook lancé seul, sans extra vars, fournira les credentials associés à la configuration dsc par défaut (conf-dso)"

        - name: Exit playbook
          ansible.builtin.meta: end_play

    - name: Set socle_config fact when dsc_cr defined and not empty
      ansible.builtin.set_fact:
        socle_config: "{{ socle_config_custom }}"
      when: (socle_config_custom is not skipped) and (socle_config_custom.resources | length > 0)
      tags:
        - always

    - name: Set DSC facts
      ansible.builtin.set_fact:
        dsc_name: "{{ socle_config.resources[0].metadata.name }}"
        dsc: "{{ socle_config.resources[0] }}"
        dsc_default_config: "{{ lookup('ansible.builtin.file', '../roles/socle-config/files/config.yaml') | from_yaml }}"
        dsc_default_releases: "{{ lookup('ansible.builtin.file', '../roles/socle-config/files/releases.yaml') | from_yaml }}"
      tags:
        - always

    - name: Combine DSC with config and releases
      ansible.builtin.set_fact:
        dsc: "{{ (dsc_default_releases | combine(dsc_default_config, recursive=True) | combine(dsc, recursive=True)).spec }}"
      tags:
        - always

    - name: Get DSO config Secret from DSO console namespace
      kubernetes.core.k8s_info:
        kind: Secret
        name: dso-config
        namespace: "{{ dsc.console.namespace }}"
      register: dso_console_config
      tags:
        - always

    - name: Retrieve DSO user infos
      tags:
        - gitlab
        - argo
        - argocd
        - console
        - console-dso
        - grafana
        - sonar
        - sonarqube
        - harbor
      block:
        - name: Get Keycloak DSO user credentials
          kubernetes.core.k8s_info:
            namespace: "{{ dsc.keycloak.namespace }}"
            kind: Secret
            name: dso-admin-user-secret
          register: keycloak_user_creds

        - name: Set Keycloak DSO user facts
          ansible.builtin.set_fact:
            keycloak_user: "{{ keycloak_user_creds.resources[0].data.ADMIN_USER | b64decode }}"
            keycloak_user_password: "{{ keycloak_user_creds.resources[0].data.ADMIN_USER_PASSWORD | b64decode }}"

    - name: Display Keycloak credentials
      ansible.builtin.debug:
        msg:
          - "URL : https://{{ dsc.keycloak.subDomain }}{{ dsc.global.rootDomain }} "
          - "Admin username: {{ dso_console_config.resources[0].data.KEYCLOAK_ADMIN | b64decode }} "
          - "Admin password: {{ dso_console_config.resources[0].data.KEYCLOAK_ADMIN_PASSWORD | b64decode }} "
      tags:
        - keycloak

    - name: Retrieve Infra user infos
      tags:
        - argo-infra
        - argocd-infra
      block:
        - name: Get Keycloak Infra user credentials
          kubernetes.core.k8s_info:
            namespace: "{{ dsc.keycloakInfra.namespace }}"
            kind: Secret
            name: infra-admin-user-secret
          register: keycloak_infra_user_creds

        - name: Set Keycloak Infra user facts
          ansible.builtin.set_fact:
            keycloak_infra_user: "{{ keycloak_infra_user_creds.resources[0].data.ADMIN_USER | b64decode }}"
            keycloak_infra_user_password: "{{ keycloak_infra_user_creds.resources[0].data.ADMIN_USER_PASSWORD | b64decode }}"

    - name: Display Keycloak Infra credentials
      tags:
        - keycloak-infra
      block:
        - name: Get Keycloak Infra admin credentials
          kubernetes.core.k8s_info:
            namespace: "{{ dsc.keycloakInfra.namespace }}"
            kind: Secret
            name: keycloak
          register: keycloak_infra_admin_creds

        - name: Display Keycloak infra admin credentials
          ansible.builtin.debug:
            msg:
              - "URL : https://{{ dsc.keycloakInfra.subDomain }}{{ dsc.global.rootDomain }} "
              - "Admin username: admininfra "
              - "Admin password: {{ keycloak_infra_admin_creds.resources[0].data['admin-password'] | b64decode }} "

    - name: Display Nexus credentials
      ansible.builtin.debug:
        msg:
          - "URL: https://{{ dsc.nexus.subDomain }}{{ dsc.global.rootDomain }} "
          - "Admin username: {{ dso_console_config.resources[0].data.NEXUS_ADMIN | b64decode }} "
          - "Admin password: {{ dso_console_config.resources[0].data.NEXUS_ADMIN_PASSWORD | b64decode }} "
      tags:
        - nexus

    - name: Get Sonarqube admin password secret
      kubernetes.core.k8s_info:
        namespace: "{{ dsc.sonarqube.namespace }}"
        kind: Secret
        name: "sonarqube"
      register: sonarqube_pwd
      tags:
        - sonar
        - sonarqube

    - name: Display Sonarqube URL, credentials and API token
      ansible.builtin.debug:
        msg:
          - "URL: https://{{ dsc.sonarqube.subDomain }}{{ dsc.global.rootDomain }} "
          - "Admin username: admin "
          - "Admin password: {{ sonarqube_pwd.resources[0].data.password | b64decode }} "
          - "OIDC username: {{ keycloak_user }} "
          - "OIDC password: {{ keycloak_user_password }} "
          - "API token: {{ dso_console_config.resources[0].data.SONAR_API_TOKEN | b64decode }} "
      tags:
        - sonar
        - sonarqube

    - name: Display Gitlab URL, credentials and API token
      ansible.builtin.debug:
        msg:
          - "URL: https://{{ dsc.gitlab.subDomain }}{{ dsc.global.rootDomain }} "
          - "Admin username: {{ keycloak_user }} "
          - "Admin password: {{ keycloak_user_password }} "
          - "API token: {{ dso_console_config.resources[0].data.GITLAB_TOKEN | b64decode }} "
      tags:
        - gitlab

    - name: Get Vault unseal keys and root token
      kubernetes.core.k8s_info:
        namespace: "{{ dsc.vault.namespace }}"
        kind: Secret
        name: "{{ dsc_name }}-vault-keys"
      register: vault_keys
      tags:
        - vault

    - name: Display Vault URL, root token and unseal keys
      ansible.builtin.debug:
        msg:
          - "URL: https://{{ dsc.vault.subDomain }}{{ dsc.global.rootDomain }} "
          - "root_token: {{ vault_keys.resources[0].data.root_token | b64decode }} "
          - "key1: {{ vault_keys.resources[0].data.key1 | b64decode }} "
          - "key2: {{ vault_keys.resources[0].data.key2 | b64decode }} "
          - "key3: {{ vault_keys.resources[0].data.key3 | b64decode }} "
      tags:
        - vault

    - name: Get Vault Infra secrets
      kubernetes.core.k8s_info:
        namespace: "{{ dsc.vaultInfra.namespace }}"
        kind: Secret
      register: vault_infra_secrets
      tags:
        - vault-infra

    - name: Set vault_infra_keys_secret_name
      ansible.builtin.set_fact:
        vault_infra_keys_secret_name: "{{ vault_infra_secrets.resources
          | selectattr('metadata.name', 'contains', 'vault-keys')
          | map(attribute='metadata.name') | first }}"
      tags:
        - vault-infra

    - name: Get Vault Infra keys
      kubernetes.core.k8s_info:
        namespace: "{{ dsc.vaultInfra.namespace }}"
        kind: Secret
        name: "{{ vault_infra_keys_secret_name }}"
      register: vault_infra_keys
      tags:
        - vault-infra

    - name: Get Vault infra unseal keys and root token
      kubernetes.core.k8s_info:
        namespace: "{{ dsc.vaultInfra.namespace }}"
        kind: Secret
        name: "{{ vault_infra_keys_secret_name }}"
      register: vault_infra_keys
      tags:
        - vault-infra

    - name: Display Vault infra URL, root token and unseal keys
      ansible.builtin.debug:
        msg:
          - "URL: https://{{ dsc.vaultInfra.subDomain }}{{ dsc.global.rootDomain }} "
          - "root_token: {{ vault_infra_keys.resources[0].data.root_token | b64decode }} "
          - "key1: {{ vault_infra_keys.resources[0].data.key1 | b64decode }} "
          - "key2: {{ vault_infra_keys.resources[0].data.key2 | b64decode }} "
          - "key3: {{ vault_infra_keys.resources[0].data.key3 | b64decode }} "
      tags:
        - vault-infra

    - name: Display Argo CD URL and credentials
      ansible.builtin.debug:
        msg:
          - "URL: https://{{ dsc.argocd.subDomain }}{{ dsc.global.rootDomain }} "
          - "Admin username: {{ keycloak_user }} "
          - "Admin password: {{ keycloak_user_password }} "
      tags:
        - argo
        - argocd

    - name: Display Argo CD infra URL and credentials
      ansible.builtin.debug:
        msg:
          - "URL: https://{{ dsc.argocdInfra.subDomain }}{{ dsc.global.rootDomain }} "
          - "Admin username: {{ keycloak_infra_user }} "
          - "Admin password: {{ keycloak_infra_user_password }} "
      tags:
        - argo-infra
        - argocd-infra

    - name: Display Harbor URL and credentials
      ansible.builtin.debug:
        msg:
          - "URL: https://{{ dsc.harbor.subDomain }}{{ dsc.global.rootDomain }} "
          - "Admin username: {{ dso_console_config.resources[0].data.HARBOR_ADMIN | b64decode }} "
          - "Admin password: {{ dso_console_config.resources[0].data.HARBOR_ADMIN_PASSWORD | b64decode }} "
          - "OIDC username: {{ keycloak_user }} "
          - "OIDC password: {{ keycloak_user_password }} "
      tags:
        - harbor

    - name: Display Console Pi Native URL and credentials
      ansible.builtin.debug:
        msg:
          - "URL: https://{{ dsc.console.subDomain }}{{ dsc.global.rootDomain }} "
          - "Admin username: {{ keycloak_user }} "
          - "Admin password: {{ keycloak_user_password }} "
      tags:
        - console
        - console-dso

    - name: Initialize grafana_name fact
      ansible.builtin.set_fact:
        grafana_name: "{{ dsc_name }}-prod"
      tags:
        - never
        - grafana

    - name: Set grafana_name
      when: dsc.global.environment != 'production'
      ansible.builtin.set_fact:
        grafana_name: "{{ dsc_name }}-horsprod"
      tags:
        - never
        - grafana

    - name: Display Grafana URL and credentials
      ansible.builtin.debug:
        msg:
          - "URL: https://{{ dsc.grafana.subDomain }}{{ dsc.global.rootDomain }}/{{ grafana_name }} "
          - "Admin username: {{ keycloak_user }} "
          - "Admin password: {{ keycloak_user_password }} "
      tags:
        - never
        - grafana
