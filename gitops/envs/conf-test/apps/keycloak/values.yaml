keycloak:
  args: []
  auth:
    adminUser: admin
    existingSecret: keycloak
    passwordSecretKey: admin-password
  autoscaling:
    enabled: false
  cache:
    enabled: true
    stackFile: ''
    stackName: kubernetes
  command: []
  configuration: ''
  containerPorts:
    http: 8080
    https: 8443
    infinispan: 7800
  existingConfigmap: ''
  externalDatabase:
    database: keycloak
    existingSecret: pg-cluster-keycloak-app
    existingSecretPasswordKey: password
    existingSecretUserKey: username
    host: pg-cluster-keycloak-rw
    port: 5432
  extraEnvVars:
  - name: DSFR_THEME_HOME_URL
    value: https://<path:forge-dso/data/env/conf-test/apps/keycloak/values#extraEnvVars
      | jsonPath {.consoleDomain}>
  - name: DSFR_THEME_SERVICE_TITLE
    value: Cloud Pi Native
  - name: DSFR_THEME_BRAND_TOP
    value: Ministere<br/>de l'interieur
  - name: DSFR_THEME_CONTACT_EMAIL
    value: cloudpinative-relations@interieur.gouv.fr
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  extraStartupArgs: ''
  httpRelativePath: /
  image:
    pullPolicy: IfNotPresent
    registry: docker.io
  ingress:
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      route.openshift.io/termination: edge
    apiVersion: ''
    enabled: true
    extraHosts: []
    extraPaths: []
    extraRules: []
    hostname: <path:forge-dso/data/env/conf-test/apps/keycloak/values#ingress | jsonPath
      {.hostname}>
    ingressClassName: nginx
    labels:
      app: keycloak
    path: /
    pathType: Prefix
    secrets: []
    selfSigned: false
    servicePort: http
    tls: true
  initContainers:
  - args:
    - -c
    - curl -k -L -f -S -o /emptydir/app-providers-dir/keycloak-theme-dsfr.jar <path:forge-dso/data/env/conf-test/apps/keycloak/values#initcontainers
      | jsonPath {.pluginDownloadUrl}>
    command:
    - sh
    image: docker.io/curlimages/curl:8.12.1
    imagePullPolicy: IfNotPresent
    name: realm-ext-provider
    volumeMounts:
    - mountPath: /emptydir
      name: empty-dir
  initdbScriptsConfigMap: ''
  keycloakConfigCli:
    enabled: false
  livenessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 300
    periodSeconds: 1
    successThreshold: 1
    timeoutSeconds: 5
  logging:
    level: INFO
    output: default
  metrics:
    enabled: false
    prometheusRule:
      enabled: false
      groups:
      - name: Keycloak
        rules:
        - alert: Keycloak instance not available
          annotations:
            message: Keycloak instance in namespace {{ include "common.names.namespace"
              . }} has not been available for the last 5 minutes.
            summary: Keycloak instance down (no ready container)
          expr: '(absent(kube_pod_container_status_ready{

            pod=~"{{ include "common.names.fullname" . }}-\\d+",

            container="{{ include "common.names.fullname" . }}",

            namespace="{{ include "common.names.namespace" . }}"}) == 1)

            or sum(kube_pod_container_status_ready{

            pod=~"{{ include "common.names.fullname" . }}-\\d+",

            container="{{ include "common.names.fullname" . }}",

            namespace="{{ include "common.names.namespace" . }}"}) == 0

            '
          for: 5m
          labels:
            severity: critical
        - alert: Keycloak Pod not healthy
          annotations:
            message: Keycloak {{"{{"}} $labels.pod {{"}}"}} pod in namespace {{ include
              "common.names.namespace" . }} has been unavailable for the last 5 minutes.
            summary: Keycloak pod not healthy (container is not ready)
          expr: 'kube_pod_container_status_ready{

            pod=~"{{ include "common.names.fullname" . }}-\\d+",

            container="{{ include "common.names.fullname" . }}",

            namespace="{{ include "common.names.namespace" . }}"} == 0

            '
          for: 5m
          labels:
            severity: warning
        - alert: Keycloak DB not available
          annotations:
            message: All Keycloak CNPG pods in namespace {{ include "common.names.namespace"
              . }} have been unavailable for the last 5 minutes.
            summary: Keycloak database down (containers not ready)
          expr: '(absent(kube_pod_container_status_ready{

            pod=~"pg-cluster-{{ include "common.names.fullname" . }}-\\d+",

            container="postgres", namespace="{{ include "common.names.namespace" .
            }}"}) == 1)

            or sum(kube_pod_container_status_ready{

            pod=~"pg-cluster-{{ include "common.names.fullname" . }}-\\d+",

            container="postgres", namespace="{{ include "common.names.namespace" .
            }}"}) == 0

            '
          for: 5m
          labels:
            severity: critical
        - alert: Keycloak DB Pod not healthy
          annotations:
            message: Keycloak {{"{{"}} $labels.pod {{"}}"}} pod in namespace {{ include
              "common.names.namespace" . }} has been unavailable for the last 5 minutes.
            summary: Keycloak database pod not healthy (container is not ready)
          expr: 'kube_pod_container_status_ready{

            pod=~"pg-cluster-{{ include "common.names.fullname" . }}-\\d+",

            container="postgres", namespace="{{ include "common.names.namespace" .
            }}"} == 0

            '
          for: 5m
          labels:
            severity: warning
        - alert: Keycloak DB PVC has low remaining disk space
          annotations:
            message: PVC {{"{{"}} $labels.persistentvolumeclaim {{"}}"}} in namespace
              {{"{{"}} $labels.namespace {{"}}"}} is running out of disk space (<
              20% left). VALUE = {{"{{"}} $value {{"}}"}}%
            summary: Keycloak CNPG PVC is running out of disk space in namespace {{"{{"}}
              $labels.namespace {{"}}"}}
          expr: 'round(

            kubelet_volume_stats_available_bytes{

            persistentvolumeclaim=~"pg-cluster-keycloak-\\d+",

            namespace="{{ include "common.names.namespace" . }}"}

            / kubelet_volume_stats_capacity_bytes{

            persistentvolumeclaim=~"pg-cluster-keycloak-\\d+",

            namespace="{{ include "common.names.namespace" . }}"} * 100, 0.01) < 20
            > 10

            '
          for: 1m
          labels:
            severity: warning
        - alert: Keycloak DB PVC almost out of disk space
          annotations:
            message: PVC {{"{{"}} $labels.persistentvolumeclaim {{"}}"}} in namespace
              {{ include "common.names.namespace" . }} is almost full (< 10% left).
              VALUE = {{"{{"}} $value {{"}}"}}%
            summary: Keycloak CNPG PVC almost out of disk space in namespace {{ include
              "common.names.namespace" . }}
          expr: 'round(

            kubelet_volume_stats_available_bytes{

            persistentvolumeclaim=~"pg-cluster-{{ include "common.names.fullname"
            . }}-\\d+",

            namespace="{{ include "common.names.namespace" . }}"}

            / kubelet_volume_stats_capacity_bytes{

            persistentvolumeclaim=~"pg-cluster-{{ include "common.names.fullname"
            . }}-\\d+",

            namespace="{{ include "common.names.namespace" . }}"} * 100, 0.01) < 10
            > 0

            '
          for: 1m
          labels:
            severity: critical
        - alert: Keycloak DB PVC out of disk space
          annotations:
            message: PVC {{"{{"}} $labels.persistentvolumeclaim {{"}}"}} in namespace
              {{ include "common.names.namespace" . }} is full (0% left).
            summary: Keycloak CNPG PVC out of disk space in namespace {{ include "common.names.namespace"
              . }}
          expr: 'kubelet_volume_stats_available_bytes{

            persistentvolumeclaim=~"pg-cluster-{{ include "common.names.fullname"
            . }}-\\d+",

            namespace="{{ include "common.names.namespace" . }}"} == 0

            '
          for: 1m
          labels:
            severity: critical
      labels: {}
      namespace: conftest-keycloak
    service:
      annotations:
        prometheus.io/port: '8080'
        prometheus.io/scrape: 'true'
      extraPorts: []
      ports:
        http: 8080
    serviceMonitor:
      enabled: true
      endpoints:
      - path: /metrics
      - path: /realms/master/metrics
      - path: /realms/dso/metrics
      port: http
  networkPolicy:
    additionalRules: {}
    allowExternal: true
    enabled: false
  pdb:
    create: false
  postgresql:
    enabled: false
  production: true
  proxyHeaders: xforwarded
  rbac:
    create: false
    rules: []
  readinessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  replicaCount: 1
  resources:
    limits:
      memory: 2048Mi
    requests:
      memory: 1024Mi
  service:
    annotations: null
    clusterIP: ''
    externalTrafficPolicy: Cluster
    extraHeadlessPorts: []
    extraPorts: []
    headless:
      annotations: null
      extraPorts: []
    http:
      enabled: true
    loadBalancerIP: ''
    loadBalancerSourceRanges: []
    nodePorts:
      http: ''
      https: ''
    ports:
      http: 80
      https: 443
    sessionAffinity: None
    sessionAffinityConfig: null
    type: ClusterIP
  serviceAccount:
    annotations: null
    automountServiceAccountToken: true
    create: true
    extraLabels: null
    name: ''
  startupProbe:
    enabled: false
    failureThreshold: 60
    initialDelaySeconds: 30
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  tls:
    enabled: false
