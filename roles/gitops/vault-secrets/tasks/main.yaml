---
# Retrieve Vault infra token
- name: Set Vault infra token fact from environment variable
  when: lookup('ansible.builtin.env', 'VAULT_INFRA_TOKEN') | length > 0
  ansible.builtin.set_fact:
    vault_infra_token: "{{ lookup('ansible.builtin.env', 'VAULT_INFRA_TOKEN') }}"

- name: Set Vault infra token fact from Kubernetes secret when environment variable not set
  when: lookup('ansible.builtin.env', 'VAULT_INFRA_TOKEN') | length == 0
  block:
    - name: Check Vault infra pods
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_infra }}"
        proxy: "{{ kubeconfig_proxy_infra | default(omit) }}"
        namespace: "{{ dsc.vaultInfra.namespace }}"
        kind: Pod
        label_selectors:
          - app.kubernetes.io/name = vault
      register: vault_infra_pods

    - name: Fetch Vault infra keys and token from infra Kubernetes cluster
      when: vault_infra_pods.resources | length > 0
      block:
        - name: Retrieve all secrets in the Vault infra namespace
          kubernetes.core.k8s_info:
            kubeconfig: "{{ kubeconfig_infra }}"
            proxy: "{{ kubeconfig_proxy_infra | default(omit) }}"
            namespace: "{{ dsc.vaultInfra.namespace }}"
            kind: Secret
          register: vault_infra_secrets

        - name: Extract the name of the Vault keys secret
          ansible.builtin.set_fact:
            vault_infra_keys_secret_name: "{{ vault_infra_secrets.resources
              | selectattr('metadata.name', 'contains', 'vault-keys')
              | map(attribute='metadata.name')
              | first | default('') }}"

        - name: Fail if Vault infra keys secret not found (unless vault-infra role is executed)
          when: vault_infra_keys_secret_name | length == 0 and 'vault-infra' not in ansible_run_tags or not dsc.vaultInfra.installEnabled
          ansible.builtin.fail:
            msg: "Vault infra keys secret not found. Please ensure Vault infra is initialized and unsealed."

        - name: Fetch the Vault infra keys secret
          when: vault_infra_keys_secret_name | length > 0
          kubernetes.core.k8s_info:
            kubeconfig: "{{ kubeconfig_infra }}"
            proxy: "{{ kubeconfig_proxy_infra | default(omit) }}"
            namespace: "{{ dsc.vaultInfra.namespace }}"
            kind: Secret
            name: "{{ vault_infra_keys_secret_name }}"
          register: vault_infra_keys

        - name: Decode and set the Vault infra token
          when: vault_infra_keys_secret_name | length > 0
          ansible.builtin.set_fact:
            vault_infra_token: "{{ vault_infra_keys.resources[0].data.root_token | b64decode }}"

# Create kv engine
- name: Get kv engines
  ansible.builtin.uri:
    validate_certs: "{{ vaultinfra_cert_valid }}"
    method: GET
    url: "https://{{ vaultinfra_domain }}/v1/sys/mounts/{{ vaultinfra_kv_name }}"
    status_code: [200, 400]
    headers:
      "X-Vault-Token": "{{ vault_infra_token }}"
  register: get_engines

- name: Create default {{ vaultinfra_kv_name }} kv engine
  when: get_engines.status == 400
  ansible.builtin.uri:
    validate_certs: "{{ vaultinfra_cert_valid }}"
    url: "https://{{ vaultinfra_domain }}/v1/sys/mounts/{{ vaultinfra_kv_name }}"
    method: POST
    status_code: [204]
    headers:
      "X-Vault-Token": "{{ vault_infra_token }}"
    body:
      type: kv
      options:
        version: 2
    body_format: json

# Get existing values for migration

- name: Get existing values for migration
  when: post_conf_job is not defined
  block:
    - name: Get Vault keys
      kubernetes.core.k8s_info:
        namespace: "{{ dsc.vault.namespace }}"
        kind: Secret
        name: "{{ dsc_name }}-vault-keys"
      register: vault_keys

    - name: Get pg-cluster-harbor-app secret
      kubernetes.core.k8s_info:
        namespace: "{{ dsc.harbor.namespace }}"
        kind: Secret
        name: pg-cluster-harbor-app
      register: pg_harbor_db_secret

    - name: Get pg-cluster-console-app secret
      kubernetes.core.k8s_info:
        namespace: "{{ dsc.console.namespace }}"
        kind: Secret
        name: pg-cluster-console-app
      register: pg_console_db_secret

    - name: Get kubernetes service
      kubernetes.core.k8s_info:
        namespace: default
        kind: Service
        name: kubernetes
      register: kubernetes_service_clusterip

    - name: Get pg-cluster-gitlab-app secret
      kubernetes.core.k8s_info:
        namespace: "{{ dsc.gitlab.namespace }}"
        kind: Secret
        name: pg-cluster-gitlab-app
      register: pg_gitlab_db_secret

    - name: Get Keycloak admin Secret from keycloak namespace
      kubernetes.core.k8s_info:
        kind: Secret
        name: keycloak
        namespace: "{{ dsc.keycloak.namespace }}"
      register: keycloak_admin_secret

# Write Vault infra secrets

- name: Write secrets
  ansible.builtin.include_tasks: write.yml
  loop: "{{ envs | subelements('apps') }}"
  loop_control:
    label: "{{ item.0.name }}"

# Argo application hard refresh and sync

- name: Argo application hard refresh and sync
  when: vault_secrets_post_install and not keycloak_reset_password and not argo_infra_ns_check.failed
  ansible.builtin.include_tasks: argocd.yml
  loop:
    - "{{ dsc.sonarqube.namespace }}"

- name: Argo application hard refresh and sync
  when: vault_secrets_post_install and keycloak_reset_password and not argo_infra_ns_check.failed
  ansible.builtin.include_tasks: argocd.yml
  loop:
    - "{{ dsc.keycloak.namespace }}"
