keycloak:
  fullnameOverride: keycloak 

  auth:
    adminUser: "admin"
    existingSecret: "keycloak"
    passwordSecretKey: "admin-password"

  tls:
    enabled: false

  production: true
  proxyHeaders: xforwarded
  httpRelativePath: "/"
  configuration: ""
  existingConfigmap: ""
  extraStartupArgs: ""
  initdbScriptsConfigMap: ""
  command: []
  args: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  replicaCount: 3

  containerPorts:
    http: 8080
    https: 8443
    infinispan: 7800

  resources:
    limits:
      memory: "2048Mi"
    requests:
      memory: "1024Mi"

  livenessProbe:
    enabled: true
    initialDelaySeconds: 300
    periodSeconds: 1
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 3
    successThreshold: 1

  startupProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 60
    successThreshold: 1

  service:
    type: "ClusterIP"
    http:
      enabled: true
    ports:
      http: 80
      https: 443
    nodePorts:
      http: ""
      https: ""
    sessionAffinity: "None"
    sessionAffinityConfig:
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: "Cluster"
    annotations:
    extraPorts: []
    extraHeadlessPorts: []
    headless:
      annotations:
      extraPorts: []

  ingress:
    enabled: true
    ingressClassName: <path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/global/values#ingressClassName>
    pathType: "Prefix"
    apiVersion: ""
    hostname: <path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/global/values#domain | jsonPath {.keycloak}>
    path: /
    servicePort: "http"
    annotations:
{% for key, val in dsc.ingress.annotations.items() %}
      {{ key }}: "{{ val }}"
{% endfor %}
      route.openshift.io/termination: "edge"
    labels:
      app: "keycloak"
{% for key, val in dsc.ingress.labels.items() %}
      {{ key }}: "{{ val }}"
{% endfor %}
    tls: true
    selfSigned: false
    extraHosts: []
    extraPaths: []
    secrets: []
    extraRules: []

  networkPolicy:
    enabled: false
    allowExternal: true
    additionalRules: {}

  serviceAccount:
    create: true
    name: ""
    automountServiceAccountToken: true
    annotations:
    extraLabels:

  rbac:
    create: false
    rules: []

  pdb:
    create: false

  autoscaling:
    enabled: false

  metrics:
    enabled: {{ dsc.global.metrics.enabled }}
    service:
      ports:
        http: 8080
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
      extraPorts: []
    serviceMonitor:
      enabled: true
      port: http
      endpoints:
        - path: '/metrics'
        - path: '/realms/master/metrics'
        - path: '/realms/dso/metrics'
{% if dsc.global.metrics.additionalLabels is defined %}
      labels: {{ dsc.global.metrics.additionalLabels }} 
{% endif %}
    prometheusRule:
      enabled: {{ dsc.global.alerting.enabled }}
      namespace: {{ dsc.keycloak.namespace }}
      labels: {}

  keycloakConfigCli:
    enabled: false

  postgresql:
    enabled: false
  #  auth:
  #    postgresPassword: ""
  #    username: bn_keycloak
  #    password: ""
  #    database: bitnami_keycloak
  #    existingSecret: ""
  #  architecture: standalone

  ## External PostgreSQL configuration
  ## All of these values are only used when postgresql.enabled is set to false
  ## @param externalDatabase.host Database host
  ## @param externalDatabase.port Database port number
  ## @param externalDatabase.user Non-root username for Keycloak
  ## @param externalDatabase.password Password for the non-root username for Keycloak
  ## @param externalDatabase.database Keycloak database name
  ## @param externalDatabase.existingSecret Name of an existing secret resource containing the database credentials
  ## @param externalDatabase.existingSecretHostKey Name of an existing secret key containing the database host name
  ## @param externalDatabase.existingSecretPortKey Name of an existing secret key containing the database port
  ## @param externalDatabase.existingSecretUserKey Name of an existing secret key containing the database user
  ## @param externalDatabase.existingSecretDatabaseKey Name of an existing secret key containing the database name
  ## @param externalDatabase.existingSecretPasswordKey Name of an existing secret key containing the database credentials
  ##
  externalDatabase:
    host: pg-cluster-keycloak-rw
    port: 5432
  #  user: ""
    database: keycloak
  #  password: ""
    existingSecret: pg-cluster-keycloak-app
  #  existingSecretHostKey: host
  #  existingSecretPortKey: port
    existingSecretUserKey: username
  #  existingSecretDatabaseKey: database
    existingSecretPasswordKey: password

  cache:
    enabled: true
    stackName: "kubernetes"
    stackFile: ""

  logging:
    output: "default"
    level: "INFO"

  extraEnvVars:
    - name: DSFR_THEME_HOME_URL
      value: https://<path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/global/values#domain | jsonPath {.console}>
    - name: DSFR_THEME_SERVICE_TITLE
      value: Cloud Pi Native
    - name: DSFR_THEME_BRAND_TOP
      value: "Ministere<br/>de l'interieur"
    - name: DSFR_THEME_CONTACT_EMAIL
      value: cloudpinative-relations@interieur.gouv.fr
  initContainers:
    - name: realm-ext-provider
      image: "<path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/global/values#image | jsonPath {.repository.docker}>/curlimages/curl:8.12.1"
      imagePullPolicy: IfNotPresent
      command:
        - sh
      args:
        - -c
        - curl -k -L -f -S -o /emptydir/app-providers-dir/keycloak-theme-dsfr.jar <path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/keycloak/values#initcontainers | jsonPath {.pluginDownloadUrl}>
      volumeMounts:
        - name: empty-dir
          mountPath: /emptydir
{% if dsc.proxy.enabled %}
      env:
        - name: HTTP_PROXY
          value: <path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/global/values#proxy | jsonPath {.httpProxy}>
        - name: HTTPS_PROXY
          value: <path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/global/values#proxy | jsonPath {.httpsProxy}>
        - name: NO_PROXY
          value: <path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/global/values#proxy | jsonPath {.noProxy}>
{% endif %}
