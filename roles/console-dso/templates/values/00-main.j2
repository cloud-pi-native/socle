ingress:
  className: {{ dsc.ingress.className | default('') }}
  hosts:
    - {{ console_domain }}
  annotations: {{ dsc.ingress.annotations }}
  labels: {{ dsc.ingress.labels }}

postgresql:
  enabled: false

global:
  postgresql:
    dbUrl: "{% if pg_db_secret.resources == [] %}postgresql://username:password@host:port?schema=public{% else %}{{ (pg_db_secret | from_yaml | json_query('resources[0].data.uri') | b64decode + '?schema=public')}}{% endif %}"
  keycloak:
    clientIds:
      backend: {{ console_backend_secret.resources[0].data.CLIENT_ID | b64decode }}
      frontend: {{ console_frontend_secret.resources[0].data.CLIENT_ID | b64decode }}
    clientSecrets:
      backend: {{ console_backend_secret.resources[0].data.CLIENT_SECRET | b64decode }}
    redirectUri: https://{{ console_domain }}
    sessionSecret: {{ session_secret }}
    domain: "{{ keycloak_domain }}"
    realm: dso

server:
  envFrom:
    - secretRef:
        name: dso-config
  plugins:
   - https://github.com/cloud-pi-native/console-plugin-observability/releases/download/v1.0.1/build-artifact.zip

cnpg:
  enabled: true
  nameOverride: pg-cluster-console
  username: dso
  dbName: dso-console-db
  mode: "{{ dsc.console.cnpg.mode }}"
  pvcSize: "{{ dsc.console.postgresPvcSize }}"
{% if dsc.console.postgresWalPvcSize is defined %}
  walPvcSize: "{{ dsc.console.postgresWalPvcSize }}"
{% endif %}
{% if use_private_registry %}
  imageName: "{{ dsc.global.registry }}/cloudnative-pg/postgresql:16.1"
{% elif dsc.console.cnpg.imageName is defined %}
  imageName: "{{ dsc.console.cnpg.imageName }}"
{% endif %}
{% if dsc.global.backup.velero.enabled %}
  annotations:
    pre.hook.backup.velero.io/command: '["/bin/bash", "-c", "(( $(date +%d) %2 == 0 )) && index=0 || index=1; pg_dump -U postgres -Fc -d  dso-console-db > /var/lib/postgresql/data/app.dump-${index}"]'
    pre.hook.backup.velero.io/container: postgres
    pre.hook.backup.velero.io/on-error: Fail
    pre.hook.backup.velero.io/timeout: 90s
{% endif %}
{% if dsc.global.backup.cnpg.enabled and dsc.console.cnpg.mode != "restore" %}
  backup:
    enabled: "{{ dsc.global.backup.cnpg.enabled }}"
    destinationPath: "s3://{{ dsc.global.backup.s3.bucketName }}/{{ dsc.global.backup.cnpg.pathPrefix }}"
    endpointURL: "{{ dsc.global.backup.s3.endpointURL }}"
{% if dsc.global.backup.cnpg.compression != 'none' %}
    compression: "{{ dsc.global.backup.cnpg.compression }}"
{% endif %}
{% if dsc.global.backup.s3.endpointCA.key is defined %}
    endpointCA:
      name: "bundle-cnpg-s3"
      key: "ca.pem"
{% endif %}
    s3Credentials:
      create: true
      secretName: "{{ dsc.global.backup.s3.credentials.name }}"
      accessKeyId:
        key: "{{ dsc.global.backup.s3.credentials.accessKeyId.key }}"
        value: "{{ dsc.global.backup.s3.credentials.accessKeyId.value }}"
      secretAccessKey:
        key: "{{ dsc.global.backup.s3.credentials.secretAccessKey.key }}"
        value: "{{ dsc.global.backup.s3.credentials.secretAccessKey.value }}"
    cron: "{{ dsc.global.backup.cnpg.cron }}"
    retentionPolicy: "{{ dsc.global.backup.cnpg.retentionPolicy }}"
{% endif %}
