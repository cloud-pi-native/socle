- name: Check cert-manager deployment
  kubernetes.core.k8s_info:
    kind: Deployment
    namespace: cert-manager
    name: cert-manager-webhook
  register: cert_manager_webhook

- name: Download cert-manager
  ansible.builtin.uri:
    url: "https://github.com/cert-manager/cert-manager/releases/download/{{ DSC.certmanager.version }}/cert-manager.yaml"
    return_content: true
  register: cert_manifest

- name: Edit manifest
  ansible.builtin.set_fact:
    manifest: "{{ cert_manifest.content | from_yaml_all | custom_cert_manager(envs) }}"
  vars:
    envs:
      - name: http_proxy
        value: "{{ DSC.proxy.http_proxy }}"
      - name: https_proxy
        value: "{{ DSC.proxy.https_proxy }}"
      - name: no_proxy
        value: "{{ DSC.proxy.no_proxy }}"
  when: DSC.proxy.enabled

- name: Apply cert-manager
  kubernetes.core.k8s:
    state: present
    definition: "{{ manifest | default(cert_manifest.content | from_yaml_all) }}"

# - name: Get Cluster CA secret
#   kubernetes.core.k8s_info:
#     kind: Secret
#     namespace: "{{ CA_NS }}"
#     name: "{{ CA_SECRET_NAME }}"
#   register: cluster_ca_secret

# - name: Set namespace fact
#   set_fact:
#     certmanager_ca_secret: "{{ cluster_ca_secret.resources[0] | combine({'metadata':{'namespace':'cert-manager'}}, recursive=True) }}"

# - name: Copy Cluster CA secret
#   kubernetes.core.k8s:
#     name: "{{ CA_SECRET_NAME }}"
#     namespace: cert-manager
#     kind: Secret
#     definition:
#       data:
#         tls.crt: "{{ cluster_ca_secret.resources[0].data['tls.crt'] }}"
#         tls.key: "{{ cluster_ca_secret.resources[0].data['tls.key'] }}"

- name: Create Let's Encrypt ClusterIssuer
  kubernetes.core.k8s:
    state: present
    template: cluster-issuer-acme.j2
  when: DSC.ingress.tls.type == 'acme'

- name: Create CA ClusterIssuer
  kubernetes.core.k8s:
    state: present
    template: cluster-issuer-ca.j2
  when: DSC.ingress.tls.type == 'ca'
