---
- name: Find vault keys
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.vault.namespace }}"
    kind: Secret
    name: "{{ dsc_name }}-vault-keys"
  register: vault_keys

# Check Vault status - node 1
- name: Check vault status - node 1
  ansible.builtin.include_tasks: check.yml
  vars:
    vault_pod: "{{ dsc_name }}-vault-0"

- name: Check if Vault is coherent
  ansible.builtin.assert:
    that:
      - ((vault_status in ['sealed', 'OK']) and (vault_keys.resources | length > 0)) or ((vault_status == 'not init') and (vault_keys.resources | length == 0))
    fail_msg: >
      {% if vault_status == 'not init' %}
      Attention ! Vault n'est pas initialisé mais vous avez un secret {{ dsc_name }}-vault-keys dans le namespace : {{ dsc.vault.namespace }}
      Veuillez le supprimer et relancer si vous souhaitez lancer une initialisation
      {% else %}
      Attention ! Vault est initialisé mais vous n'avez pas de secret {{ dsc_name }}-vault-keys dans le namespace : {{ dsc.vault.namespace }}
      C'est inquiétant !
      {% endif %}

# Init Vault - node 1
- name: Init vault node - node 1
  when: vault_status == 'not init'
  kubernetes.core.k8s_exec:
    container: vault
    pod: "{{ dsc_name }}-vault-0"
    namespace: "{{ dsc.vault.namespace }}"
    command: vault operator init -key-shares=3 -key-threshold=2 -format=json
  register: init
  until: "init is not failed"
  retries: 3
  delay: 20

# Store Vault keys and token - node 1
- name: Set unseal_keys fact
  when: init.changed
  no_log: true
  ansible.builtin.set_fact:
    unseal_keys: "{{ init.stdout
      | from_json
      | dict2items
      | selectattr('key', 'eq', 'unseal_keys_b64')
      | map(attribute='value') | first }}"

- name: Set root_token fact
  when: init.changed
  no_log: true
  ansible.builtin.set_fact:
    root_token: "{{ init.stdout
      | from_json
      | dict2items
      | selectattr('key', 'eq', 'root_token')
      | map(attribute='value') | first }}"

- name: Store vault keys and token
  when: vault_keys.resources | length == 0
  kubernetes.core.k8s:
    definition:
      kind: Secret
      metadata:
        name: "{{ dsc_name }}-vault-keys"
        namespace: "{{ dsc.vault.namespace }}"
      data:
        key1: "{{ unseal_keys[0] | b64encode }}"
        key2: "{{ unseal_keys[1] | b64encode }}"
        key3: "{{ unseal_keys[2] | b64encode }}"
        root_token: "{{ root_token | b64encode }}"
        init_config: "{{ init.stdout | from_json | b64encode }}"

- name: Get vault keys
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.vault.namespace }}"
    kind: Secret
    name: "{{ dsc_name }}-vault-keys"
  register: vault_keys

- name: Get Vault token
  ansible.builtin.set_fact:
    vault_token: "{{ vault_keys.resources[0].data.root_token | b64decode }}"
    unseal_key_index: "0" # will not increment if defined in "vars" of unseal task

# Unseal Vault
- name: Unseal vault primary - node 1
  when: vault_status == 'not init' or vault_status == 'sealed'
  ansible.builtin.include_tasks: unseal.yml
  vars:
    vault_pod: "{{ dsc_name }}-vault-0"

- name: Join and unseal other nodes
  when: vault_values.vault.server.ha.enabled
  ansible.builtin.include_tasks: join_and_unseal_node.yml
  loop: "{{ range(1, 3) | list }}" # nodes index 1 and 2
  loop_control:
    loop_var: vault_node_index

# Create kv engine
- name: Get kv engines
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    method: GET
    url: "{{ vault_auth_url }}/v1/sys/mounts/forge-dso"
    status_code: [200, 400]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
  register: get_engines
  retries: 3
  delay: 5

- name: Create default 'forge-dso/' kv engine
  when: get_engines.status == 400
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "{{ vault_auth_url }}/v1/sys/mounts/forge-dso"
    method: POST
    status_code: [204]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
    body:
      type: kv
      options:
        version: 2
    body_format: json

# Jwt
- name: Config - get auth method"
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "{{ vault_auth_url }}/v1/sys/auth/jwt"
    status_code: [200, 400]
    headers:
      X-Vault-Token: "{{ vault_token }}"
  register: jwt_state
  retries: 5

- name: Config - set auth method
  when: jwt_state.status == 400
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "{{ vault_auth_url }}/v1/sys/auth/jwt"
    method: POST
    status_code: [204]
    headers:
      X-Vault-Token: "{{ vault_token }}"
    body:
      type: jwt
      description: Login for Gitlab-ci
    body_format: json

- name: Config - add role default-ci
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "{{ vault_auth_url }}/v1/auth/jwt/role/default-ci"
    method: POST
    status_code: [204]
    headers:
      X-Vault-Token: "{{ vault_token }}"
      Content-Type: application/json
    body:
      role_type: jwt
      policies:
        - default-ci
      token_explicit_max_ttl: 60
      bound_claims_type: glob
      user_claim: user_email
      bound_audiences:
        - "{{ vault_auth_url }}"
      bound_claims:
        iss:
          - "https://{{ gitlab_domain }}"
          - "{{ gitlab_domain }}"
      claim_mappings:
        namespace_path: namespace_path
        project_path: project_path
        project_id: project_id
        ref: ref
    body_format: json

- name: Config - set jwt config
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "{{ vault_auth_url }}/v1/auth/jwt/config"
    method: POST
    status_code: [204]
    headers:
      X-Vault-Token: "{{ vault_token }}"
    body:
      oidc_discovery_url: https://{{ gitlab_domain }}
      oidc_discovery_ca_pem: "{{ exposed_ca_pem }}"
      bound_issuer: https://{{ gitlab_domain }}
      default_role: default-ci
      namespace_in_state: false
    body_format: json

- name: Config - get accessor jwt config
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "{{ vault_auth_url }}/v1/sys/auth/jwt"
    status_code: [200]
    headers:
      X-Vault-Token: "{{ vault_token }}"
  register: get_accessor

- name: Config - create policy
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "{{ vault_auth_url }}/v1/sys/policy/default-ci"
    method: POST
    status_code: [204]
    headers:
      X-Vault-Token: "{{ vault_token }}"
    body:
      policy: |
        path "forge-dso/+/{{ '{{' }}identity.entity.aliases.{{ get_accessor.json.accessor }}.metadata.namespace_path{{ '}}' }}/*" {
          capabilities = ["list","read"]
        }
        path "forge-dso/+/{{ '{{' }}identity.entity.aliases.{{ get_accessor.json.accessor }}.metadata.namespace_path{{ '}}' }}" {
          capabilities = ["list","read"]
        }
    body_format: json

# Oidc
- name: Get vault client secret
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: "{{ dsc.keycloak.namespace }}"
    name: keycloak-client-secret-vault-client
  register: vault_secret

- name: Get auth methods
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "{{ vault_auth_url }}/v1/sys/auth/oidc"
    method: GET
    status_code: [200, 400]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
  register: get_auth_method

- name: Enable oidc auth method
  when: get_auth_method.status == 400
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "{{ vault_auth_url }}/v1/sys/auth/oidc"
    method: POST
    status_code: [200, 204]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
    body:
      "type": "oidc"
    body_format: json

- name: Get Vault client secret
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: "{{ dsc.keycloak.namespace }}"
    name: keycloak-client-secret-vault-client
  register: vault_secret
  failed_when: vault_secret.resources | length == 0

- name: Configure oidc auth method
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "{{ vault_auth_url }}/v1/auth/oidc/config"
    method: POST
    status_code: [200, 204]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
    body:
      "oidc_discovery_url": "https://{{ keycloak_domain }}/realms/{{ dsc.keycloak.applicationRealm }}"
      "oidc_discovery_ca_pem": "{{ exposed_ca_pem }}"
      "oidc_client_id": "{{ vault_secret.resources[0].data.CLIENT_ID | b64decode }}"
      "oidc_client_secret": "{{ vault_secret.resources[0].data.CLIENT_SECRET | b64decode }}"
      "default_role": "default"
      "type": "oidc"
      "allowed_redirect_uris":
        - "https://{{ vault_domain }}/ui/vault/auth/oidc/oidc/callback"
        - "https://{{ vault_domain }}/oidc/callback"
    body_format: json

- name: Create oidc role
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "{{ vault_auth_url }}/v1/auth/oidc/role/default"
    method: POST
    status_code: [200, 204]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
    body:
      "oidc_scopes":
        - "openid"
        - "generic"
      "bound_audiences":
        - "{{ vault_secret.resources[0].data.CLIENT_ID | b64decode }}"
      "claim_mappings":
        "prefered_username": "username"
        "email": "email"
      "groups_claim": "groups"
      "allowed_redirect_uris":
        - "https://{{ vault_domain }}/ui/vault/auth/oidc/oidc/callback"
        - "https://{{ vault_domain }}/oidc/callback"
      "user_claim": "sub"
      "token_policies":
        - "default"
    body_format: json

- name: Create admin access policy
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "{{ vault_auth_url }}/v1/sys/policies/acl/admin"
    method: POST
    status_code: [200, 204]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
    body: "{{ lookup('ansible.builtin.template', 'superadmin-policy.json.j2') }}"
    body_format: json

- name: Create admin group
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "{{ vault_auth_url }}/v1/identity/group"
    method: POST
    status_code: [200, 204]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
    body:
      "name": "admin"
      "type": "external"
      "policies":
        - "admin"
    body_format: json

- name: Get oidc accessor
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "{{ vault_auth_url }}/v1/sys/auth"
    method: GET
    status_code: [200, 204]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
  register: oidc_auth

- name: Get admin group id
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "{{ vault_auth_url }}/v1/identity/group/name/admin"
    method: GET
    status_code: [200, 204]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
  register: user_group

- name: Create admin group alias
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "{{ vault_auth_url }}/v1/identity/group-alias"
    method: POST
    status_code: [200, 400]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
    body:
      "name": "/admin"
      "mount_accessor": "{{ oidc_auth.json['oidc/'].accessor }}"
      "canonical_id": "{{ user_group.json.data.id }}"
    body_format: json

- name: Set oidc method as default
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "{{ vault_auth_url }}/v1/sys/auth/oidc/tune"
    method: POST
    status_code: [204]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
    body:
      "listing_visibility": "unauth"
    body_format: json

# AppRole
- name: Get auth methods
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "{{ vault_auth_url }}/v1/sys/auth/approle"
    method: GET
    status_code: [200, 400]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
  register: get_auth_method

- name: Enable approle auth method
  when: get_auth_method.status == 400
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "{{ vault_auth_url }}/v1/sys/auth/approle"
    method: POST
    status_code: [200, 204]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
    body:
      "type": "approle"
    body_format: json
