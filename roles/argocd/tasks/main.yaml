---
- name: Get argo client secret
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: "{{ dsc.keycloak.namespace }}"
    name: keycloak-client-secret-argo-client
  register: argocd_secret
  failed_when: argocd_secret.resources | length == 0

- name: Argo CD OpenShift scc crb
  kubernetes.core.k8s:
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        creationTimestamp:
        name: "{{ dsc_name }}-argocd-system:openshift:scc:privileged"
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: system:openshift:scc:privileged
      subjects:
        - kind: ServiceAccount
          namespace: "{{ dsc.argocd.namespace }}"
          name: "{{ dsc_name }}-argocd-repo-server"
        - kind: ServiceAccount
          namespace: "{{ dsc.argocd.namespace }}"
          name: argocd-server
        - kind: ServiceAccount
          namespace: "{{ dsc.argocd.namespace }}"
          name: "{{ dsc_name }}-redis"
        - kind: ServiceAccount
          namespace: "{{ dsc.argocd.namespace }}"
          name: "{{ dsc_name }}-redis-ha"
        - kind: ServiceAccount
          namespace: "{{ dsc.argocd.namespace }}"
          name: "{{ dsc_name }}-redis-ha-haproxy"

- name: Add helm repo
  kubernetes.core.helm_repository:
    name: argo
    repo_url: "{{ dsc.argocd.helmRepoUrl }}"
    force_update: true

- name: Set path fact
  ansible.builtin.set_fact:
    path: "{{ role_path + '/templates/values' }}"

- name: Compute ArgoCD Helm values
  ansible.builtin.include_role:
    name: combine
  vars:
    combine_path: "{{ path }}"
    combine_user_values: "{{ dsc.argocd['values'] }}"
    combine_dest_var: "argo_values"

- name: Deploy helm
  kubernetes.core.helm:
    name: "{{ dsc_name }}"
    chart_ref: argo/argo-cd
    chart_version: "{{ dsc.argocd.chartVersion }}"
    release_namespace: "{{ dsc.argocd.namespace }}"
    create_namespace: true
    values: "{{ argo_values }}"

- name: Find gitlab token in inventory
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.console.namespace }}"
    kind: Secret
    name: dso-config
  register: ansible_inventory

- name: Create global gitlab secret
  kubernetes.core.k8s:
    when: ansible_inventory.resources | length > 0 and 'GITLAB_TOKEN' in ansible_inventory.resources[0].data
    definition:
      data:
        password: "{{ ansible_inventory.resources[0].data.GITLAB_TOKEN }}"
        url: "{{ ('https://' + ([gitlab_domain, dsc.global.projectsRootDir] | flatten | join ('/') )) | b64encode }}"
        username: "{{ 'root' | b64encode }}"
      kind: Secret
      metadata:
        labels:
          argocd.argoproj.io/secret-type: repo-creds
        name: gitlab
        namespace: "{{ dsc.argocd.namespace }}"
      type: Opaque

- name: Install routes
  kubernetes.core.k8s:
    template: "{{ item }}"
  with_items:
    - ingress.yaml.j2

- name: Set alerting rules
  when: dsc.global.alerting.enabled
  kubernetes.core.k8s:
    template: prometheusrule.yml.j2

- name: Patch serviceMonitors
  when: >
    dsc.global.metrics.enabled and
    dsc.global.metrics.additionalLabels is defined
  block:
    - name: Get serviceMonitors
      kubernetes.core.k8s_info:
        api_version: monitoring.coreos.com/v1
        kind: ServiceMonitor
        namespace: "{{ dsc.argocd.namespace }}"
      register: service_monitors

    - name: Get service_monitors names
      ansible.builtin.set_fact:
        service_monitors_names: "{{ service_monitors.resources | map(attribute='metadata.name') }}"

    - name: Patch serviceMonitors
      kubernetes.core.k8s:
        kind: ServiceMonitor
        namespace: "{{ dsc.argocd.namespace }}"
        state: patched
        name: "{{ item }}"
        definition:
          metadata:
            labels:
              "{{ dsc.global.metrics.additionalLabels }}"
      loop: "{{ service_monitors_names }}"
