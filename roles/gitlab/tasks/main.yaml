---
- name: Create GitLab namespace
  kubernetes.core.k8s:
    name: "{{ dsc.gitlab.namespace }}"
    api_version: v1
    kind: Namespace
    state: present

- name: CNPG s3 CA (secret)
  when: >
    dsc.global.backup.cnpg.enabled and 
    dsc.global.backup.cnpg.endpointCA.namespace is defined and
    dsc.global.backup.cnpg.endpointCA.name is defined and
    dsc.global.backup.cnpg.endpointCA.key is defined
  block:
    - name: Get secret
      kubernetes.core.k8s_info:
        name: "{{ dsc.global.backup.cnpg.endpointCA.name }}"
        namespace: "{{ dsc.global.backup.cnpg.endpointCA.namespace }}"
        kind: Secret
      register: cnpg_s3_ca_resource

    - name: Extract key
      ansible.builtin.set_fact: 
        cnpg_s3_ca_pem: "{{ cnpg_s3_ca_resource.resources[0].data[dsc.global.backup.cnpg.endpointCA.key] }}"

    - name: Set cnpg bundle-ca secret
      kubernetes.core.k8s:
        name: "bundle-cnpg-s3"
        namespace: "{{ dsc.gitlab.namespace }}"
        kind: Secret
        api_version: v1
        definition:
          data:
            ca.pem: "{{ cnpg_s3_ca_pem }}"

- name: Set cnpg backup secret
  kubernetes.core.k8s:
    name: "{{ dsc.global.backup.cnpg.s3Credentials.name }}"
    namespace: "{{ dsc.gitlab.namespace }}"
    kind: Secret
    api_version: v1
    definition:
      data:
        accessKeyId: "{{ dsc.global.backup.cnpg.s3Credentials.accessKeyId.value | b64encode }}"
        secretAccessKey: "{{ dsc.global.backup.cnpg.s3Credentials.secretAccessKey.value | b64encode }}"
  when: dsc.global.backup.cnpg.enabled

- name: Remove cnpg scheduled backup
  kubernetes.core.k8s:
    api_version: v1
    kind: ScheduledBackup
    namespace: "{{ dsc.gitlab.namespace }}"
    name: pg-cluster-gitlab
    state: absent
  when: not dsc.global.backup.cnpg.enabled

- name: Create PostgreSQL cluster and gitlab database
  kubernetes.core.k8s:
    template: "{{ item }}"
  with_items:
    - pg-cluster-gitlab.yaml.j2
    - pg-cluster-gitlab-backup.yaml.j2
    - pg-cluster-gitlab-nodeport.yaml.j2

- name: Wait pg-cluster-gitlab-rw endpoint
  kubernetes.core.k8s_info:
    kind: Endpoints
    namespace: "{{ dsc.gitlab.namespace }}"
    name: pg-cluster-gitlab-rw
  register: endpoint
  until: endpoint.resources[0].subsets[0].addresses[0] is defined
  retries: 30
  delay: 5

- name: Wait job.batch/pg-cluster-gitlab-1-initdb to be terminated
  kubernetes.core.k8s_info:
    kind: Job
    api_version: batch/v1
    namespace: "{{ dsc.gitlab.namespace }}"
    name: pg-cluster-gitlab-1-initdb
  register: job1
  until: job1.resources | length == 0
  retries: 30
  delay: 5

- name: Wait job.batch/pg-cluster-gitlab-2-join to be terminated
  kubernetes.core.k8s_info:
    kind: Job
    api_version: batch/v1
    namespace: "{{ dsc.gitlab.namespace }}"
    name: pg-cluster-gitlab-2-join
  register: job2
  until: job2.resources | length == 0
  retries: 30
  delay: 5

- name: Get existing control-plane deployments
  kubernetes.core.k8s_info:
    kind: Deployment
    label_selectors:
      - "control-plane=controller-manager"
  register: cp_deployments

- name: Set gitlab_operator_ns fact
  ansible.builtin.set_fact:
    gitlab_operator_ns: "{{ cp_deployments.resources
      | selectattr('metadata.name', 'equalto', 'gitlab-controller-manager')
      | map(attribute='metadata.namespace') | first }}"

- name: Get existing GitLab sidekiq deployments
  kubernetes.core.k8s_info:
    kind: Deployment
    label_selectors:
      - "app.kubernetes.io/instance=gitlab-sidekiq"
      - "app.kubernetes.io/managed-by=gitlab-operator"
  register: gs_deployments

- name: Set other_gitlabs_ns fact
  ansible.builtin.set_fact:
    other_gitlabs_ns: "{{ gs_deployments.resources | map(attribute='metadata.namespace')
      | reject('search', dsc.gitlab.namespace) | list }}"

- name: Create RBAC resources
  kubernetes.core.k8s:
    template: rbac.yaml.j2

- name: Set some facts
  ansible.builtin.set_fact:
    vault_auth_path: jwt
    vault_auth_role: default-ci
    npm_file: "{{ lookup('ansible.builtin.template', 'npm_file.j2') }}"
    mvn_config_file: "{{ lookup('ansible.builtin.template', 'mvn_conf_file.j2') }}"

- name: Get Gitlab client secret
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: "{{ dsc.keycloak.namespace }}"
    name: keycloak-client-secret-gitlab-client
  register: gitlab_secret
  failed_when: gitlab_secret.resources | length == 0

- name: Define provider secret content
  ansible.builtin.set_fact:
    provider: |
      name: openid_connect
      label: Keycloak
      args:
        name: openid_connect
        scope:
          - openid
          - generic
        response_type: code
        issuer: https://{{ keycloak_domain }}/realms/dso
        client_auth_method: query
        discovery: true
        uid_field: email
        client_options:
          identifier: {{ gitlab_secret.resources[0].data.CLIENT_ID | b64decode }}
          secret: {{ gitlab_secret.resources[0].data.CLIENT_SECRET | b64decode }}
          redirect_uri: https://{{ gitlab_domain }}/users/auth/openid_connect/callback

- name: Create keycloak secret
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      data:
        provider: "{{ provider | b64encode }}"
      kind: Secret
      metadata:
        name: openid-connect
        namespace: "{{ dsc.gitlab.namespace }}"

- name: Create exposed_ca Secret
  kubernetes.core.k8s:
    kind: Secret
    namespace: "{{ dsc.gitlab.namespace }}"
    name: exposed-ca
    definition:
      data:
        tls.crt: "{{ exposed_ca_pem | b64encode }}"

- name: Set path fact
  ansible.builtin.set_fact:
    path: "{{ role_path + '/templates/values' }}"

- name: Compute Gitlab Helm values
  ansible.builtin.include_role:
    name: combine
  vars:
    combine_path: "{{ path }}"
    combine_user_values: "{{ dsc.gitlab['values'] }}"
    combine_dest_var: "gitlab_values"

- name: Install GitLab instance
  kubernetes.core.k8s:
    api_version: apps.gitlab.com/v1beta1
    kind: GitLab
    name: gitlab
    namespace: "{{ dsc.gitlab.namespace }}"
    definition:
      spec:
        chart:
          version: "{{ dsc.gitlab.chartVersion }}"
          values: "{{ gitlab_values }}"

- name: Wait Gitlab webservice endpoint to be available
  kubernetes.core.k8s_info:
    kind: Endpoints
    namespace: "{{ dsc.gitlab.namespace }}"
    name: gitlab-webservice-default
  register: endpoint
  until: endpoint.resources[0].subsets[0].addresses[0] is defined
  retries: 45
  delay: 20

- name: Find GitLab token in inventory
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.console.namespace }}"
    kind: Secret
    name: dso-config
  register: ansible_inventory

- name: Get GitLab token
  ansible.builtin.set_fact:
    gitlab_token: "{{ ansible_inventory.resources[0].data.GITLAB_TOKEN | b64decode }}"
  when: ansible_inventory.resources[0].data.GITLAB_TOKEN is defined and ansible_inventory.resources[0].data.GITLAB_TOKEN | length != 0
  register: set_token_inv

- name: Test GitLab token
  when: set_token_inv.skipped is not defined
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: https://{{ gitlab_domain }}/api/v4/admin/ci/variables
    headers:
      PRIVATE-TOKEN: "{{ gitlab_token }}"
  register: test_token
  ignore_errors: true

- name: Initialize GitLab token
  when: (set_token_inv.skipped is defined and set_token_inv.skipped) or (test_token.status != 200)
  block:
    - name: Get toolbox pod name
      kubernetes.core.k8s_info:
        kind: pod
        label_selectors:
          - app = toolbox
        namespace: "{{ dsc.gitlab.namespace }}"
      register: toolbox_pods

    - name: Set toolbox pod name
      ansible.builtin.set_fact:
        tb_pod: "{{ toolbox_pods.resources[0].metadata.name }}"

    - name: Create token
      ansible.builtin.include_tasks:
        file:
          "{{ dsc.gitlab.chartVersion is version('7.2.0', operator='lt', version_type='loose') |
          ternary('create-token-7.2.0-.yaml', 'create-token-7.2.0+.yaml') }}"

    - name: Set new GitLab token
      ansible.builtin.set_fact:
        gitlab_token: "{{ token.stdout_lines[-2][1:-1] }}"

    - name: Update inventory
      kubernetes.core.k8s:
        kind: Secret
        name: dso-config
        namespace: "{{ dsc.console.namespace }}"
        state: patched
        definition:
          data:
            GITLAB_TOKEN: "{{ gitlab_token | b64encode }}"

- name: Get settings
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: https://{{ gitlab_domain }}/api/v4/application/settings
    headers:
      PRIVATE-TOKEN: "{{ gitlab_token }}"
  register: get_settings
  ignore_errors: true

- name: Set some parameters
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: https://{{ gitlab_domain }}/api/v4/application/settings
    method: PUT
    headers:
      PRIVATE-TOKEN: "{{ gitlab_token }}"
    body:
      signup_enabled: false
      outbound_local_requests_allowlist_raw: "0.0.0.0/0"
      default_branch_protection: 0
      import_sources:
        - git
    body_format: form-urlencoded
  changed_when: true

- name: Set parent group name
  ansible.builtin.set_fact:
    index: "0"
    parent: ""

- name: Include create group
  ansible.builtin.include_tasks:
    file: create-group.yaml

- name: Set or update some CI/CD variables
  community.general.gitlab_group_variable:
    api_url: https://{{ gitlab_domain }}
    api_token: "{{ gitlab_token }}"
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    group: "{{ dsc.global.projectsRootDir | join('/') }}"
    purge: false
    variables:
      - name: VAULT_KV
        value: forge-dso
      - name: CATALOG_PATH
        value: "{{ dsc.global.projectsRootDir | join('/') }}/catalog"
      - name: PROJECTS_ROOT_DIR
        value: "{{ dsc.global.projectsRootDir | join('/') }}"
      - name: NEXUS_HOST_URL
        value: https://{{ nexus_domain }}
      - name: NEXUS_HOSTNAME
        value: "{{ nexus_domain }}"
      - name: SONAR_HOST_URL
        value: https://{{ sonar_domain }}
      - name: VAULT_AUTH_PATH
        value: "{{ vault_auth_path }}"
      - name: VAULT_AUTH_ROLE
        value: "{{ vault_auth_role }}"
      - name: VAULT_SERVER_URL
        value: https://{{ vault_domain }}
      - name: MVN_CONFIG_FILE
        variable_type: file
        value: "{{ mvn_config_file }}"
      - name: NPM_FILE
        variable_type: file
        value: "{{ npm_file }}"

- name: Set or update proxy CI/CD variables
  community.general.gitlab_group_variable:
    api_url: https://{{ gitlab_domain }}
    api_token: "{{ gitlab_token }}"
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    group: "{{ dsc.global.projectsRootDir | join('/') }}"
    purge: false
    state: "{{ dsc.proxy.enabled | ternary('present', 'absent') }}"
    variables:
      - name: HTTP_PROXY
        value: "{{ dsc.proxy.http_proxy | default('') }}"
      - name: HTTPS_PROXY
        value: "{{ dsc.proxy.https_proxy | default('') }}"
      - name: NO_PROXY
        value: "{{ dsc.proxy.no_proxy | default('') }}"
      - name: PROXY_HOST
        value: "{{ dsc.proxy.host | default('') }}"
      - name: PROXY_PORT
        value: "{{ dsc.proxy.port | default('') }}"
      - name: http_proxy
        value: "{{ dsc.proxy.http_proxy | default('') }}"
      - name: https_proxy
        value: "{{ dsc.proxy.https_proxy | default('') }}"
      - name: no_proxy
        value: "{{ dsc.proxy.no_proxy | default('') }}"

- name: Set or update CA_BUNDLE variable
  community.general.gitlab_group_variable:
    api_url: https://{{ gitlab_domain }}
    api_token: "{{ gitlab_token }}"
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    group: "{{ dsc.global.projectsRootDir | join('/') }}"
    purge: false
    state: "{{ dsc.additionalsCA | ternary('present', 'absent') }}"
    variables:
      - name: CA_BUNDLE
        value: "{{ [additionals_ca_pem, exposed_ca_pem] | join('\n') }}"
        variable_type: file

- name: Set or update insecure args variables
  community.general.gitlab_group_variable:
    api_url: https://{{ gitlab_domain }}
    api_token: "{{ gitlab_token }}"
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    group: "{{ dsc.global.projectsRootDir | join('/') }}"
    purge: false
    state: "{{ dsc.gitlab.insecureCI | ternary('present', 'absent') }}"
    variables:
      - name: EXTRA_KANIKO_ARGS
        value: --skip-tls-verify
      - name: EXTRA_GIT_ARGS
        value: -c http.sslVerify=false
      - name: EXTRA_VAULT_ARGS
        value: -tls-skip-verify

- name: Set or update additional CI/CD variables
  community.general.gitlab_group_variable:
    api_url: https://{{ gitlab_domain }}
    api_token: "{{ gitlab_token }}"
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    group: "{{ dsc.global.projectsRootDir | join('/') }}"
    purge: false
    variables:
      - name: "{{ item.name }}"
        value: "{{ item.value }}"
        masked: "{{ item.masked }}"
        protected: "{{ item.protected }}"
  with_items: "{{ dsc.gitlab.extraCIVars }}"

- name: Configure metrics resources
  when: dsc.global.metrics.enabled
  block:
    - name: Get GitLab namespace pods
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: "{{ dsc.gitlab.namespace }}"
      register: gitlab_pods

    - name: Get Gitlab ServiceMonitors
      kubernetes.core.k8s_info:
        api_version: monitoring.coreos.com/v1
        kind: ServiceMonitor
        namespace: "{{ dsc.gitlab.namespace }}"
      register: service_monitors

    - name: Get Gitlab endpoints
      kubernetes.core.k8s_info:
        kind: Endpoints
        namespace: "{{ dsc.gitlab.namespace }}"
      register: endpoints

    - name: Patch existing ServiceMonitors
      ansible.builtin.include_tasks:
        file: patch-servicemonitors.yaml
      loop: "{{ gitlab_service_monitors }}"

    - name: Declare some additionnal ServiceMonitors
      ansible.builtin.include_tasks:
        file: add-servicemonitors.yaml
      loop: "{{ gitlab_additional_service_monitors }}"

