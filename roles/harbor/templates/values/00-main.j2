expose:
  imagePullPolicy: IfNotPresent
  type: ingress
  ingress:
    className: {{ dsc.ingress.className | default('') }}
    hosts:
      core: {{ harbor_domain }}
      notary: {{ dsc.harbor.subDomain }}-notary{{ root_domain }}
    notary:
      annotations:
{% for key, val in dsc.ingress.annotations.items() %}
        {{ key }}: {{ val }}
{% endfor %}
      labels:
{% for key, val in dsc.ingress.labels.items() %}
        {{ key }}: {{ val }}
{% endfor %}
    harbor:
      annotations:
{% for key, val in dsc.ingress.annotations.items() %}
        {{ key }}: {{ val }}
{% endfor %}
      labels:
{% for key, val in dsc.ingress.labels.items() %}
        {{ key }}: {{ val }}
{% endfor %}
externalURL: https://{{ harbor_domain }}
persistence:
  enabled: true
  resourcePolicy: keep
  persistentVolumeClaim:
    registry:
      size: "{{ dsc.harbor.pvcRegistrySize }}"
    jobservice:
      jobLog:
        size: "{{ dsc.harbor.pvcJobLogSize }}"
    database:
      size: "{{ dsc.harbor.pvcDatabaseSize }}"
    redis:
      size: "{{ dsc.harbor.pvcRedisSize }}"
    trivy:
      size: "{{ dsc.harbor.pvcTrivySize }}"
harborAdminPassword: "{{ dsc.harbor.adminPassword }}"
nginx:
  replicas: 2
  serviceAccountName: harbor-sa
  image:
    repository: docker.io/goharbor/nginx-photon
portal:
  replicas: 2
  serviceAccountName: harbor-sa
  image:
    repository: docker.io/goharbor/harbor-portal
core:
  replicas: 3
  serviceAccountName: harbor-sa
  image:
    repository: docker.io/goharbor/harbor-core
jobservice:
  replicas: 2
  serviceAccountName: harbor-sa
  image:
    repository: docker.io/goharbor/harbor-jobservice
  jobLoggers:
  - stdout
registry:
  replicas: 3
  serviceAccountName: harbor-sa
  registry:
    image:
      repository: docker.io/goharbor/registry-photon
  controller:
    image:
      repository: docker.io/goharbor/harbor-registryctl
trivy:
  replicas: 2
  serviceAccountName: harbor-sa
  image:
    repository: docker.io/goharbor/trivy-adapter-photon
database:
  type: external
  external:
    host: "pg-cluster-harbor-rw"
    port: "5432"
    username: "{{ pg_harbor_db_secret.resources[0].data.username | b64decode }}"
    password: "{{ pg_harbor_db_secret.resources[0].data.password | b64decode }}"
    coreDatabase: "registry"
redis:
  internal:
    serviceAccountName: harbor-sa
    image:
      repository: docker.io/goharbor/redis-photon
exporter:
  replicas: 1
  image:
    repository: docker.io/goharbor/harbor-exporter
  serviceAccountName: harbor-sa
{% if dsc.global.metrics.enabled %}
metrics:
  enabled: true
  serviceMonitor:
    enabled: true
{% endif %}
