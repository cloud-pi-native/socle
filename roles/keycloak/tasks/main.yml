- name: Create Keycloak namespace
  kubernetes.core.k8s:
    name: "{{ dsc.keycloak.namespace }}"
    api_version: v1
    kind: Namespace
    state: present

- name: Create PostgreSQL cluster and keycloak database
  kubernetes.core.k8s:
    template: pg-cluster-keycloak.yaml.j2

- name: Wait pg-cluster-keycloak-rw endpoint
  kubernetes.core.k8s_info:
    kind: Endpoints
    namespace: "{{ dsc.keycloak.namespace }}"
    name: pg-cluster-keycloak-rw
  register: endpoint
  until: endpoint.resources[0].subsets[0].addresses[0] is defined
  retries: 30
  delay: 5

- name: Wait job.batch/pg-cluster-keycloak-1-initdb to be terminated
  kubernetes.core.k8s_info:
    kind: Job
    api_version: batch/v1
    namespace: "{{ dsc.keycloak.namespace }}"
    name: pg-cluster-keycloak-1-initdb
  register: job1
  until: job1.resources | length == 0
  retries: 30
  delay: 5

- name: Wait job.batch/pg-cluster-keycloak-2-join to be terminated
  kubernetes.core.k8s_info:
    kind: Job
    api_version: batch/v1
    namespace: "{{ dsc.keycloak.namespace }}"
    name: pg-cluster-keycloak-2-join
  register: job2
  until: job2.resources | length == 0
  retries: 30
  delay: 5

- name: Get Keycloak admin password secret
  no_log: true
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.keycloak.namespace }}"
    kind: Secret
    name: "keycloak"
  register: kc_adm_pass_secret

- name: Set Keycloak admin password secret
  when: kc_adm_pass_secret.resources | length == 0
  no_log: true
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      data:
        admin-password: "{{ lookup('password', '/dev/null length=24 chars=ascii_letters,digits')|b64encode }}"
      metadata:
        name: keycloak
        namespace: "{{ dsc.keycloak.namespace }}"
      type: Opaque

- name: Add bitnami helm repo
  kubernetes.core.helm_repository:
    name: bitnami
    repo_url: https://charts.bitnami.com/bitnami

- name: Set Keycloak helm values
  ansible.builtin.set_fact:
    kc_values: "{{ lookup('template', 'values.yaml.j2') | from_yaml }}"

- name: Merge with Keycloak user values
  ansible.builtin.set_fact:
    kc_values: "{{ kc_values | combine(dsc.keycloak['values'], recursive=True) }}"

- name: Deploy helm
  kubernetes.core.helm:
    name: keycloak
    chart_ref: bitnami/keycloak
    chart_version: "{{ dsc.keycloak.chartVersion }}"
    release_namespace: "{{ dsc.keycloak.namespace }}"
    values: "{{ kc_values }}"

- name: Wait Keycloak URL
  ansible.builtin.uri:
    url: "https://{{ keycloak_domain }}"
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    method: GET
    status_code: [200, 202]
    return_content: false
  register: kc_response
  until: kc_response is not failed
  retries: 30
  delay: 5

- name: Get Keycloak admin password
  no_log: true
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.keycloak.namespace }}"
    kind: Secret
    name: "keycloak"
  register: kc_adm_pass

- name: Set Keycloak admin credentials facts
  no_log: true
  ansible.builtin.set_fact:
    keycloak_admin_password: "{{ kc_adm_pass.resources[0].data['admin-password']|b64decode }}"
    keycloak_admin: "admin"

- name: Update console inventory
  no_log: true
  kubernetes.core.k8s:
    kind: ConfigMap
    name: dso-config
    namespace: "{{ dsc.console.namespace }}"
    state: patched
    definition:
      data:
        KEYCLOAK_ADMIN_PASSWORD: "{{ keycloak_admin_password }}"
        KEYCLOAK_ADMIN: "{{ keycloak_admin }}"

- name: Get Keycloak API token
  no_log: true
  ansible.builtin.uri:
    url: "https://{{ keycloak_domain }}/realms/master/protocol/openid-connect/token"
    method: POST
    status_code: [200, 202]
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    return_content: true
    body: "username={{ keycloak_admin }}&password={{ keycloak_admin_password }}&grant_type=password&client_id=admin-cli"
  register: kc_token

- name: Set kc_access_token fact
  no_log: true
  ansible.builtin.set_fact:
    kc_access_token: "{{ kc_token.json.access_token }}"

- name: Get keycloak realms from API
  no_log: true
  ansible.builtin.uri:
    url: "https://{{ keycloak_domain }}/admin/realms"
    method: GET
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    status_code: [200, 202]
    return_content: true
    body_format: json
    headers:
      Authorization: "bearer {{ kc_access_token }}"
  register: kc_realms

- name: Create dso realm
  when: kc_realms.json | selectattr('realm', 'equalto', 'dso') | length == 0
  no_log: true
  community.general.keycloak_realm:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak_domain }}
    auth_realm: master
    auth_username: "{{ keycloak_admin }}"
    auth_password: "{{ keycloak_admin_password }}"
    state: present
    id: dso
    realm: dso
    display_name: Dso Realm
    enabled: true

- name: Get keycloak dso realm users from API
  no_log: true
  ansible.builtin.uri:
    url: "https://{{ keycloak_domain }}/admin/realms/dso/users"
    method: GET
    status_code: [200, 202]
    return_content: true
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    body_format: json
    headers:
      Authorization: "bearer {{ kc_access_token }}"
  register: kc_dso_users

- name: Find dso admin secret
  no_log: true
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.keycloak.namespace }}"
    kind: Secret
    name: dso-admin-user-secret
  register: dso_admin_secret

- name: Create dso admin secret and user
  when: (dso_admin_secret.resources | length == 0) or (kc_dso_users.json | selectattr('username', 'equalto', dso_admin_secret.resources[0].data.ADMIN_USER|b64decode) | length == 0)
  no_log: true
  block:
    - name: Generate admin user password
      ansible.builtin.set_fact:
        admin_user_password: "{{ lookup('password', '/dev/null length=16 chars=ascii_letters,digits') }}"

    - name: Create dso secret
      kubernetes.core.k8s:
        definition:
          kind: Secret
          metadata:
            namespace: "{{ dsc.keycloak.namespace }}"
            name: dso-admin-user-secret
          data:
            ADMIN_USER: "{{ 'admin@example.com'|b64encode }}"
            ADMIN_USER_PASSWORD: "{{ admin_user_password|b64encode }}"
          type: Opaque

    - name: Remove dso admin user
      community.general.keycloak_user:
        validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
        auth_client_id: admin-cli
        auth_keycloak_url: https://{{ keycloak_domain }}
        auth_realm: master
        auth_username: "{{ keycloak_admin }}"
        auth_password: "{{ keycloak_admin_password }}"
        state: absent
        realm: dso
        username: admin@example.com

    - name: Create dso admin user
      community.general.keycloak_user:
        validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
        auth_client_id: admin-cli
        auth_keycloak_url: https://{{ keycloak_domain }}
        auth_realm: master
        auth_username: "{{ keycloak_admin }}"
        auth_password: "{{ keycloak_admin_password }}"
        state: present
        realm: dso
        credentials:
            - temporary: false
              type: password
              value: "{{ admin_user_password }}"
        username: admin@example.com
        first_name: Admin
        last_name: Admin
        email: admin@example.com
        enabled: true
        email_verified: true
#        force: true  ## Ne fontionne pas quand user supprimé via la GUI et tâche relancée.

- name: Get dso keycloak client scopes from API
  no_log: true
  ansible.builtin.uri:
    url: "https://{{ keycloak_domain }}/admin/realms/dso/client-scopes"
    method: GET
    status_code: [200, 202]
    return_content: true
    body_format: json
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    headers:
      Authorization: "bearer {{ kc_access_token }}"
  register: kc_client_scopes

- name: Create generic keycloak client scope
  when: kc_client_scopes.json | selectattr('name', 'equalto', 'generic') | length == 0
  no_log: true
  community.general.keycloak_clientscope:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak_domain }}
    auth_realm: master
    auth_username: "{{ keycloak_admin }}"
    auth_password: "{{ keycloak_admin_password }}"
    name: generic
    realm: dso
    description: Generic client scope
    protocol: openid-connect
    attributes:
      include.in.token.scope: true
      display.on.consent.screen: true
      gui.order: ''
      consent.screen.text: ''
    protocolMappers: "{{ lookup('ansible.builtin.file', 'generic-client-scope-protocolMappers.yaml') | from_yaml }}"

- ansible.builtin.include_tasks:
    file: client.yaml
  with_items: "{{ keycloak_clients }}"

- name: Create base admins groups
  no_log: true
  community.general.keycloak_group:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak_domain }}
    auth_realm: master
    auth_username: "{{ keycloak_admin }}"
    auth_password: "{{ keycloak_admin_password }}"
    state: present
    realm: dso
    name: "{{ item }}"
  with_items:
    - admin
    - ArgoCDAdmins
