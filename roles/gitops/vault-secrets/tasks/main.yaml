---
# Get CNPG s3 secret

- name: CNPG s3 CA (secret)
  ansible.builtin.include_tasks: cnpg-s3-ca.yaml
  when: >
    dsc.global.backup.cnpg.enabled and
    dsc.global.backup.s3.endpointCA.namespace is defined and
    dsc.global.backup.s3.endpointCA.name is defined and
    dsc.global.backup.s3.endpointCA.key is defined

# Retrieve Vault Infra token

- name: Get Vault Infra token
  when: lookup('ansible.builtin.env', 'VAULT_INFRA_TOKEN') != ''
  ansible.builtin.set_fact:
    vault_infra_token: "{{ lookup('ansible.builtin.env', 'VAULT_INFRA_TOKEN') }}"

- name: Get Vault Infra keys and token
  when: lookup('ansible.builtin.env', 'VAULT_INFRA_TOKEN') == ''
  block:
    - name: Get Vault Infra secrets
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_infra }}"
        proxy: "{{ kubeconfig_proxy_infra | default('')}}"
        namespace: "{{ dsc.vaultInfra.namespace }}"
        kind: Secret
      register: vault_infra_secrets

    - name: Set vault_infra_keys_secret_name
      ansible.builtin.set_fact:
        vault_infra_keys_secret_name: "{{ vault_infra_secrets.resources
          | selectattr('metadata.name', 'contains', 'vault-keys')
          | map(attribute='metadata.name') | first }}"

    - name: Get Vault Infra keys
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_infra }}"
        proxy: "{{ kubeconfig_proxy_infra | default('')}}"
        namespace: "{{ dsc.vaultInfra.namespace }}"
        kind: Secret
        name: "{{ vault_infra_keys_secret_name }}"
      register: vault_infra_keys

    - name: Get Vault Infra token
      ansible.builtin.set_fact:
        vault_infra_token: "{{ vault_infra_keys.resources[0].data.root_token | b64decode }}"

# Create kv engine
- name: Get kv engines
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    method: GET
    url: "https://{{ vaultinfra_domain }}/v1/sys/mounts/{{ vaultinfra_kv_name }}"
    status_code: [200, 400]
    headers:
      "X-Vault-Token": "{{ vault_infra_token }}"
  register: get_engines

- name: Create default {{ vaultinfra_kv_name }} kv engine
  when: get_engines.status == 400
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "https://{{ vaultinfra_domain }}/v1/sys/mounts/{{ vaultinfra_kv_name }}"
    method: POST
    status_code: [204]
    headers:
      "X-Vault-Token": "{{ vault_infra_token }}"
    body:
      type: kv
      options:
        version: 2
    body_format: json

# Get existing values for migration

- name: Get dso-config secret
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.console.namespace }}"
    kind: Secret
    name: dso-config
  register: dso_config_secret
  ignore_errors: true

- name: Get sonarqube secret
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.sonarqube.namespace }}"
    kind: Secret
    name: sonarqube
  register: sonarqube_secret
  ignore_errors: true

- name: Get pg-cluster-harbor-app secret
  when: not dsc.harbor.cnpg.initPassword
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.harbor.namespace }}"
    kind: Secret
    name: pg-cluster-harbor-app
  register: pg_harbor_db_secret

- name: Get pg-cluster-gitlab-app secret
  when: not dsc.gitlab.cnpg.initPassword
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.gitlab.namespace }}"
    kind: Secret
    name: pg-cluster-gitlab-app
  register: pg_gitlab_db_secret

# Write Vault Infra secrets

- name: Write secrets
  ansible.builtin.include_tasks: write.yml
  loop: "{{ envs | subelements('apps') }}"
  loop_control:
    label: "{{ item.0.name }}"

# Argo application hard refresh and sync

- name: Argo application hard refresh and sync
  when: vault_secrets_post_install and not keycloak_reset_password and not argo_infra_ns_check.failed
  ansible.builtin.include_tasks: argocd.yml
  loop:
    - "{{ dsc.sonarqube.namespace }}"

- name: Argo application hard refresh and sync
  when: vault_secrets_post_install and keycloak_reset_password and not argo_infra_ns_check.failed
  ansible.builtin.include_tasks: argocd.yml
  loop:
    - "{{ dsc.keycloak.namespace }}"
