---
- name: Create Nexus namespace
  kubernetes.core.k8s:
    kind: Namespace
    name: "{{ dsc.nexus.namespace }}"

- name: Add Nexus helm repo
  kubernetes.core.helm_repository:
    name: "{{ dsc.nexus.helmRepoName }}"
    repo_url: "{{ dsc.nexus.helmRepoUrl }}"
    force_update: true

- name: Check if first install
  block:
    - name: Check Nexus Pod
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: "{{ dsc.nexus.namespace }}"
      register: check_nx_pod

    - name: Set first_install fact
      ansible.builtin.set_fact:
        first_install: "{{ check_nx_pod.resources | length == 0 }}"

- name: Create nexus Service Account
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: nexus-sa
        namespace: "{{ dsc.nexus.namespace }}"

- name: Manage PVC
  ansible.builtin.include_tasks:
    file: manage-pvc.yaml

- name: Set path fact
  ansible.builtin.set_fact:
    path: "{{ role_path + '/templates/values' }}"

- name: Define default admin password if not set
  ansible.builtin.set_fact:
    nexus_admin_password: "{{ lookup('password', '/dev/null length=16 chars=ascii_letters') }}"

- name: Create admin-creds secret
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: admin-creds
        namespace: "{{ dsc.nexus.namespace }}"
      data:
        password: "{{ nexus_admin_password | b64encode }}"

- name: Compute Nexus Helm values
  ansible.builtin.include_role:
    name: combine
  vars:
    combine_path: "{{ path }}"
    combine_user_values: "{{ dsc.nexus['values'] }}"
    combine_dest_var: "nexus_values"

- name: Check Nexus helm release
  kubernetes.core.helm_info:
    name: "{{ dsc.nexus.release }}"
    namespace: "{{ dsc.nexus.namespace }}"
  register: nexus_helm_release

- name: Set upgrading_chart fact
  when: nexus_helm_release.status is defined
  block:
    - name: Retrieve installed Nexus chart version
      ansible.builtin.set_fact:
        nexus_installed_chart_version: "{{ nexus_helm_release.status.chart | regex_replace('nexus3-', '') }}"

    - name: Initialize upgrading_chart fact
      ansible.builtin.set_fact:
        upgrading_chart: false

- name: Manage upgrading_chart fact
  when: nexus_installed_chart_version is defined
  become: false
  block:
    - name: Update upgrading_chart fact
      when: dsc.nexus.chartVersion is version(nexus_installed_chart_version, operator='gt', version_type='loose')
      ansible.builtin.set_fact:
        upgrading_chart: true

- name: Deploy Nexus helm
  kubernetes.core.helm:
    name: "{{ dsc.nexus.release }}"
    chart_ref: "{{ dsc.nexus.chartReference }}"
    chart_version: "{{ dsc.nexus.chartVersion }}"
    release_namespace: "{{ dsc.nexus.namespace }}"
    create_namespace: true
    values: "{{ nexus_values }}"
  ignore_errors: true
  register: nexus_deploy

- name: Deploy Nexus Ingress
  kubernetes.core.k8s:
    template: "{{ item }}"
  with_items:
   - ingress.yml.j2

- name: Wait Nexus endpoint to initialize
  kubernetes.core.k8s_info:
    kind: Endpoints
    namespace: "{{ dsc.nexus.namespace }}"
    name: "{{ dsc.nexus.release }}"
  register: endpoint
  until: endpoint.resources[0].subsets[0].addresses[0].ip is defined
  retries: 45
  delay: 5

- name: Wait Nexus URL
  ansible.builtin.uri:
    url: https://{{ nexus_domain }}
    method: GET
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    status_code: [200, 202]
    return_content: false
  register: nexus_response
  until: nexus_response is not failed
  retries: 25
  delay: 5

- name: Update inventory
  when: first_install
  block:
    - name: Update or create inventory secret (dso-config)
      kubernetes.core.k8s:
        kind: Secret
        name: dso-config
        namespace: "{{ dsc.console.namespace }}"
        state: patched
        definition:
          apiVersion: v1
          metadata:
            name: dso-config
            namespace: "{{ dsc.console.namespace }}"
          data:
            NEXUS_ADMIN_PASSWORD: "{{ nexus_admin_password | b64encode }}"
      register: update_inventory_result

    - name: Get admin-creds secret
      kubernetes.core.k8s_info:
        namespace: "{{ dsc.nexus.namespace }}"
        kind: Secret
        name: admin-creds
      register: admin_creds_secret

    - name: Update admin-creds secret
      when: admin_creds_secret.resources[0] is defined
      kubernetes.core.k8s:
        kind: Secret
        name: admin-creds
        namespace: "{{ dsc.nexus.namespace }}"
        state: patched
        definition:
          data:
            password: "{{ nexus_admin_password | b64encode }}"

- name: Get inventory
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.console.namespace }}"
    kind: Secret
    name: dso-config
  register: ansible_inventory

- name: Debug inventory retrieval
  ansible.builtin.debug:
    var: ansible_inventory
  when: ansible_inventory.resources is not defined or ansible_inventory.resources | length == 0

- name: Retrieve admin password from inventory
  ansible.builtin.set_fact:
    nexus_admin_password: "{{ ansible_inventory.resources[0].data.NEXUS_ADMIN_PASSWORD | b64decode | default(nexus_admin_password) }}"
  when: >
    ansible_inventory.resources is defined and
    ansible_inventory.resources | length > 0 and
    ansible_inventory.resources[0].data.NEXUS_ADMIN_PASSWORD is defined

- name: Activate Nexus metrics scraping
  when: dsc.global.metrics.enabled
  block:
    - name: Create admin-creds secret
      kubernetes.core.k8s:
        definition:
          kind: Secret
          apiVersion: v1
          data:
            username: "{{ ansible_inventory.resources[0].data.NEXUS_ADMIN }}"
            password: "{{ ansible_inventory.resources[0].data.NEXUS_ADMIN_PASSWORD }}"
          metadata:
            labels:
              app: nexus
            name: admin-creds
            namespace: "{{ dsc.nexus.namespace }}"
          type: Opaque

    - name: Create nexus ServiceMonitor
      kubernetes.core.k8s:
        template: servicemonitor.yml.j2

- name: Set alerting rules
  when: dsc.global.alerting.enabled and dsc.global.metrics.enabled
  kubernetes.core.k8s:
    template: prometheusrule.yml.j2

- name: Patch serviceMonitors
  when: >
    dsc.global.metrics.enabled and
    dsc.global.metrics.additionalLabels is defined
  block:
    - name: Get serviceMonitors
      kubernetes.core.k8s_info:
        api_version: monitoring.coreos.com/v1
        kind: ServiceMonitor
        namespace: "{{ dsc.nexus.namespace }}"
      register: service_monitors

    - name: Get service_monitors names
      ansible.builtin.set_fact:
        service_monitors_names: "{{ service_monitors.resources | map(attribute='metadata.name') }}"

    - name: Patch serviceMonitors
      kubernetes.core.k8s:
        kind: ServiceMonitor
        namespace: "{{ dsc.nexus.namespace }}"
        state: patched
        name: "{{ item }}"
        definition:
          metadata:
            labels:
              "{{ dsc.global.metrics.additionalLabels }}"
      loop: "{{ service_monitors_names }}"
