---
- name: Create Sonarqube namespace
  kubernetes.core.k8s:
    kind: Namespace
    name: "{{ dsc.sonarqube.namespace }}"

- name: CNPG s3 CA (secret)
  when: >
    dsc.global.backup.cnpg.enabled and
    dsc.global.backup.s3.endpointCA.namespace is defined and
    dsc.global.backup.s3.endpointCA.name is defined and
    dsc.global.backup.s3.endpointCA.key is defined
  block:
    - name: Get secret
      kubernetes.core.k8s_info:
        name: "{{ dsc.global.backup.s3.endpointCA.name }}"
        namespace: "{{ dsc.global.backup.s3.endpointCA.namespace }}"
        kind: Secret
      register: cnpg_s3_ca_resource

    - name: Extract key
      ansible.builtin.set_fact:
        cnpg_s3_ca_pem: "{{ cnpg_s3_ca_resource.resources[0].data[dsc.global.backup.s3.endpointCA.key] }}"

    - name: Set cnpg bundle-ca secret
      kubernetes.core.k8s:
        name: "bundle-cnpg-s3"
        namespace: "{{ dsc.sonarqube.namespace }}"
        kind: Secret
        api_version: v1
        definition:
          data:
            ca.pem: "{{ cnpg_s3_ca_pem }}"

- name: Set cnpg backup secret
  kubernetes.core.k8s:
    name: "{{ dsc.global.backup.s3.credentials.name }}"
    namespace: "{{ dsc.sonarqube.namespace }}"
    kind: Secret
    api_version: v1
    definition:
      data:
        accessKeyId: "{{ dsc.global.backup.s3.credentials.accessKeyId.value | b64encode }}"
        secretAccessKey: "{{ dsc.global.backup.s3.credentials.secretAccessKey.value | b64encode }}"
  when: dsc.global.backup.cnpg.enabled

- name: Remove cnpg scheduled backup
  kubernetes.core.k8s:
    api_version: v1
    kind: ScheduledBackup
    namespace: "{{ dsc.sonarqube.namespace }}"
    name: pg-cluster-sonar
    state: absent
  when: not dsc.global.backup.cnpg.enabled

- name: Create PostgreSQL cluster and sonar database
  kubernetes.core.k8s:
    template: "{{ item }}"
  with_items:
    - pg-cluster-sonar.yaml.j2
    - pg-cluster-sonar-backup.yaml.j2
    - pg-cluster-sonar-nodeport.yaml.j2

- name: Wait pg-cluster-sonar-rw endpoint
  kubernetes.core.k8s_info:
    kind: Endpoints
    namespace: "{{ dsc.sonarqube.namespace }}"
    name: pg-cluster-sonar-rw
  register: endpoint
  until: endpoint.resources[0].subsets[0].addresses[0] is defined
  retries: 30
  delay: 5

- name: Wait job.batch/pg-cluster-sonar-1-initdb to be terminated
  kubernetes.core.k8s_info:
    kind: Job
    api_version: batch/v1
    namespace: "{{ dsc.sonarqube.namespace }}"
    name: pg-cluster-sonar-1-initdb
  register: job1
  until: job1.resources | length == 0
  retries: 30
  delay: 5

- name: Add SonarQube helm repo
  kubernetes.core.helm_repository:
    name: sonarqube
    repo_url: "{{ dsc.sonarqube.helmRepoUrl }}"
    force_update: true

- name: Get admin password secret
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: "{{ dsc.sonarqube.namespace }}"
    name: sonarqube
  register: admin_password_secret

- name: Set admin password secret
  when: admin_password_secret.resources | length == 0
  no_log: true
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      data:
        password: "{{ lookup('password', '/dev/null length=24 chars=ascii_letters,digits') | b64encode }}"
        currentPassword: "{{ 'admin' | b64encode }}"
      metadata:
        name: sonarqube
        namespace: "{{ dsc.sonarqube.namespace }}"
      type: Opaque

- name: Get SonarQube monitoring password secret
  no_log: true
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.sonarqube.namespace }}"
    kind: Secret
    name: sonar-monitoring-password
  register: sonar_monitoring_secret

- name: Set SonarQube monitoring password secret
  when: sonar_monitoring_secret.resources | length == 0
  no_log: true
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      data:
        monitoring-password: "{{ lookup('password', '/dev/null length=24 chars=ascii_letters,digits') | b64encode }}"
      metadata:
        name: sonar-monitoring-password
        namespace: "{{ dsc.sonarqube.namespace }}"
      type: Opaque

- name: Get Sonar client secret
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: "{{ dsc.keycloak.namespace }}"
    name: keycloak-client-secret-sonar-client
  register: sonar_secret
  failed_when: sonar_secret.resources | length == 0

- name: Set settings fact
  ansible.builtin.set_fact:
    keycloak_secret: "{{ sonar_secret.resources[0].data.CLIENT_SECRET | b64decode }}"
    keycloak_client: "{{ sonar_secret.resources[0].data.CLIENT_ID | b64decode }}"

- name: Set path fact
  ansible.builtin.set_fact:
    path: "{{ role_path + '/templates/values' }}"

- name: Compute Sonarqube Helm values
  ansible.builtin.include_role:
    name: combine
  vars:
    combine_path: "{{ path }}"
    combine_user_values: "{{ dsc.sonarqube['values'] }}"
    combine_dest_var: "sonar_values"

- name: Check SonarQube helm release
  kubernetes.core.helm_info:
    name: sonarqube
    namespace: "{{ dsc.sonarqube.namespace }}"
  register: sonar_helm_release

- name: Set upgrading_chart fact
  when: sonar_helm_release.status is defined
  block:
    - name: Retrieve installed SonarQube chart version
      ansible.builtin.set_fact:
        sonar_installed_chart_version: "{{ sonar_helm_release.status.chart | regex_replace('sonarqube-', '') }}"

    - name: Initialize upgrading_chart fact
      ansible.builtin.set_fact:
        upgrading_chart: false

    - name: Manage upgrading_chart fact
      when: sonar_installed_chart_version is defined
      block:
        - name: Update upgrading_chart fact
          when: dsc.sonarqube.chartVersion is version(sonar_installed_chart_version, operator='gt', version_type='loose')
          ansible.builtin.set_fact:
            upgrading_chart: true

- name: Deploy helm
  kubernetes.core.helm:
    name: sonarqube
    chart_ref: sonarqube/sonarqube
    chart_version: "{{ dsc.sonarqube.chartVersion }}"
    release_namespace: "{{ dsc.sonarqube.namespace }}"
    create_namespace: true
    values: "{{ sonar_values }}"
  ignore_errors: true
  register: helm_install

- name: Manage SonarQube upgrade
  when: >
    helm_install is failed and
    upgrading_chart is defined and
    upgrading_chart
  block:
    - name: Get Sonarqube admin password secret
      kubernetes.core.k8s_info:
        namespace: "{{ dsc.sonarqube.namespace }}"
        kind: Secret
        name: "sonarqube"
      register: sonarqube_pwd

    - name: Get SonarQube migration status
      ansible.builtin.uri:
        validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
        url: https://{{ sonar_domain }}/api/v2/system/migrations-status
        user: "admin"
        password: "{{ sonarqube_pwd.resources[0].data.password | b64decode }}"
        force_basic_auth: true
        method: GET
        return_content: true
        status_code: 200
      register: sonar_migration_status

    - name: Trigger DB migration
      when: "'Database migration is required' in sonar_migration_status.json.message"
      ansible.builtin.uri:
        validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
        url: https://{{ sonar_domain }}/api/system/migrate_db
        user: "admin"
        password: "{{ sonarqube_pwd.resources[0].data.password | b64decode }}"
        force_basic_auth: true
        method: POST
        status_code: [200, 204]

    - name: Wait SonarQube status to be UP
      ansible.builtin.uri:
        validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
        url: https://{{ sonar_domain }}/api/system/status
        user: "admin"
        password: "{{ sonarqube_pwd.resources[0].data.password | b64decode }}"
        force_basic_auth: true
        method: GET
        return_content: true
        status_code: 200
      register: sonar_check
      until: sonar_check.json.status == "UP"
      retries: 60
      delay: 5

- name: Wait sonarqube endpoint to initialize
  kubernetes.core.k8s_info:
    kind: Endpoints
    namespace: "{{ dsc.sonarqube.namespace }}"
    name: sonarqube-sonarqube
  register: endpoint
  until: endpoint.resources[0].subsets[0].addresses[0].ip is defined
  retries: 45
  delay: 5

- name: Get DSO Console inventory
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.console.namespace }}"
    kind: Secret
    name: dso-config
  register: ansible_inventory

- name: Get SonarQube version
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: https://{{ sonar_domain }}/api/server/version
    method: GET
    return_content: true
  register: sonar_version

- name: Reset Admin Password procedure
  when: ansible_inventory.resources[0].data.SONAR_API_TOKEN is undefined
  ansible.builtin.include_tasks:
    file: reset-admin-password.yaml

- name: Get Sonarqube admin password secret
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.sonarqube.namespace }}"
    kind: Secret
    name: "sonarqube"
  register: sonarqube_pwd

- name: Remove permissions for sonar-users
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: https://{{ sonar_domain }}/api/permissions/remove_group?groupName=sonar-users&permission={{ item }}
    user: "admin"
    password: "{{ sonarqube_pwd.resources[0].data.password | b64decode }}"
    force_basic_auth: true
    method: post
    status_code: 204
  with_items:
    - scan
    - provisioning

- name: Create metrics resources
  when: dsc.global.metrics.enabled
  block:
    - name: Get SonarQube pod
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: "{{ dsc.sonarqube.namespace }}"
        label_selectors:
          - app=sonarqube
          - release=sonarqube
      register: sonarqube_pod

    - name: Set metrics ports names facts
      loop: "{{ metrics_ports_names_facts }}"
      ansible.builtin.set_fact:
        "{{ item.fact_name }}": "{{ sonarqube_pod.resources
          | map(attribute='spec.containers') | first
          | selectattr('name', 'contains', 'sonarqube')
          | map(attribute='ports') | first
          | selectattr('containerPort', 'equalto', item.port)
          | map(attribute='name') | first }}"

    - name: Set metrics paths facts
      loop: "{{ metrics_paths_facts }}"
      ansible.builtin.set_fact:
        "{{ item.fact_name }}": "{{ item.path }}"

    - name: Create PodMonitor
      kubernetes.core.k8s:
        template: podmonitor.yml.j2

- name: Set alerting rules
  when: dsc.global.alerting.enabled
  kubernetes.core.k8s:
    template: prometheusrule.yml.j2

- name: Patch podMonitors
  when: >
    dsc.global.metrics.enabled and
    dsc.global.metrics.additionalLabels is defined
  block:
    - name: Get podMonitors
      kubernetes.core.k8s_info:
        api_version: monitoring.coreos.com/v1
        kind: PodMonitor
        namespace: "{{ dsc.sonarqube.namespace }}"
      register: pod_monitors

    - name: Get pod_monitors names
      ansible.builtin.set_fact:
        pod_monitors_names: "{{ pod_monitors.resources | map(attribute='metadata.name') }}"

    - name: Patch podMonitors
      kubernetes.core.k8s:
        kind: PodMonitor
        namespace: "{{ dsc.sonarqube.namespace }}"
        state: patched
        name: "{{ item }}"
        definition:
          metadata:
            labels:
              "{{ dsc.global.metrics.additionalLabels }}"
      loop: "{{ pod_monitors_names }}"
