---
- name: Get primary pod for {{ item.name }}
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ item.namespace }}"
    label_selectors:
      - "cnpg.io/cluster=pg-cluster-{{ item.name }}"
      - role=primary
  register: cnpg_primary_pod

- name: Run pg_dump for {{ item.name }}
  kubernetes.core.k8s_exec:
    container: postgres
    pod: "{{ cnpg_primary_pod.resources[0].metadata.name }}"
    namespace: "{{ item.namespace }}"
    command: >
      sh -c 'pg_dump -U postgres -Fc -d {{ item.db }} > /var/lib/postgresql/data/app.dump.tmp'

- name: Copy dump from pod to control host for {{ item.name }}
  kubernetes.core.k8s_cp:
    state: from_pod
    container: postgres
    pod: "{{ cnpg_primary_pod.resources[0].metadata.name }}"
    namespace: "{{ item.namespace }}"
    remote_path: /var/lib/postgresql/data/app.dump.tmp
    local_path: "/tmp/{{ item.name }}.dump.tmp"

- name: Upload dump to S3 for {{ item.name }}
  amazon.aws.s3_object:
    endpoint_url: "{{ dsc.global.backup.s3.endpointURL }}"
    bucket: "{{ dsc.global.backup.s3.bucketName }}"
    object: "pgdump/{{ item.name }}/app.dump-{{ lookup('pipe', 'date +%d') | int % 10 }}"
    mode: put
    overwrite: true
    access_key: "{{ dsc.global.backup.s3.credentials.accessKeyId.value }}"
    secret_key: "{{ dsc.global.backup.s3.credentials.secretAccessKey.value }}"
    src: "/tmp/{{ item.name }}.dump.tmp"
  environment:
    AWS_REQUEST_CHECKSUM_CALCULATION: "when_required"
    AWS_RESPONSE_CHECKSUM_VALIDATION: "when_required"
  register: pgdump_s3_upload_result
  ignore_errors: true

- name: Upload dump to custom S3 using s3cmd
  when: "'XAmzContentSHA256Mismatch' in pgdump_s3_upload_result.msg"
  ansible.builtin.command: >
    s3cmd put
      /tmp/{{ item.name }}.dump.tmp
      s3://backup-dso-integ/pgdump/{{ item.name }}/app.dump-{{ lookup('pipe', 'date +%d') | int % 10 }}
      --access_key={{ dsc.global.backup.s3.credentials.accessKeyId.value }}
      --secret_key={{ dsc.global.backup.s3.credentials.secretAccessKey.value }}
      --host={{ dsc.global.backup.s3.endpointURL }}
      --host-bucket="{{ dsc.global.backup.s3.endpointURL | regex_replace('https?://', '') }}/%(bucket)s"
      --ca-certs=/bundle-s3-dir/ca.pem
