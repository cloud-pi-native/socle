console:
  nameOverride: "{{ dsc_name }}-cpn-console"
  fullnameOverride: "dso-cpn-console"
  config:
    create: true
    name: "dso-config"
    projectsRootDir: "{{ dsc.global.projectsRootDir | flatten | join ('/') }}"
    secrets:
      ARGO_NAMESPACE: {{ dsc.argocd.namespace }}
      ARGOCD_URL: "https://<path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/global/values#domain| jsonPath {.argocd}>/"
      GITLAB_TOKEN: <path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/gitlab/values#gitlabToken>
      GITLAB_URL: "https://<path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/global/values#domain| jsonPath {.gitlab}>/"
      GITLAB_INTERNAL_URL: "http://{{ dsc.gitlab.subDomain }}-webservice-default.{{ dsc.gitlab.namespace }}.svc.cluster.local:8181/"
      HARBOR_ADMIN: admin
      HARBOR_ADMIN_PASSWORD: <path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/harbor/values#global| jsonPath {.harborAdminPassword}>
      HARBOR_URL: "https://<path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/global/values#domain| jsonPath {.harbor}>/"
      HARBOR_INTERNAL_URL: "http://harbor-core.{{ dsc.harbor.namespace }}.svc.cluster.local/"
      KEYCLOAK_ADMIN: "dsoadmin"
      KEYCLOAK_ADMIN_PASSWORD: <path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/keycloak/values#auth| jsonPath {.adminPassword}>
      KEYCLOAK_URL: "http://{{ dsc.keycloak.subDomain }}.{{ dsc.keycloak.namespace }}.svc.cluster.local/realms/{{ dsc.keycloak.applicationRealm }}/.well-known/openid-configuration"
      NEXUS_ADMIN: <path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/nexus/values#auth| jsonPath {.adminUsername}>
      NEXUS_ADMIN_PASSWORD: <path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/nexus/values#auth| jsonPath {.adminPassword}>
      NEXUS_URL: "https://<path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/global/values#domain| jsonPath {.nexus}>/"
      NEXUS_INTERNAL_URL: "http://{{ dsc.nexus.subDomain }}.{{ dsc.nexus.namespace }}.svc.cluster.local:8081/"
      SONAR_API_TOKEN: "<path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/sonarqube/values#auth| jsonPath {.sonarApiToken}>"
      SONARQUBE_URL: "https://<path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/global/values#domain| jsonPath {.sonarqube}>/"
      SONARQUBE_INTERNAL_URL: "http://sonarqube-sonarqube.{{ dsc.sonarqube.namespace }}.svc.cluster.local:9000/"
      VAULT_TOKEN: <path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/vault/values#vaultToken>
      VAULT_URL: "https://<path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/global/values#domain| jsonPath {.vault}>/"
      VAULT_INTERNAL_URL: "http://{{ dsc_name }}-{{ dsc.vault.subDomain }}-active.{{ dsc.vault.namespace }}.svc.cluster.local:8200/"
  global:
    env:
      NODE_ENV: "production"
    keycloak:
      domain:
        backend: "{{ dsc.keycloak.subDomain }}.{{ dsc.keycloak.namespace }}.svc.cluster.local"
        frontend: "<path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/global/values#domain| jsonPath {.keycloak}>"
      realm: {{ dsc.keycloak.applicationRealm }} 
      protocol:
        backend: "http"
        frontend: "https"
      clientIds:
        backend: "console-backend"
        frontend: "console-frontend"
      clientSecrets:
        backend: "<path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/keycloak/values#client| jsonPath {.consoleBackend.secret}>"
      redirectUri: "https://<path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/global/values#domain| jsonPath {.console}>"
      sessionSecret: "a-very-strong-secret-with-more-than-32-char"
      devRealm: false
    postgresql:
      cnpgSecretName: pg-cluster-console-app
  ingress:
    className: <path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/global/values#ingressClassName>
    enabled: true
    hosts:
    - <path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/global/values#domain| jsonPath {.console}>
    annotations: {{ dsc.ingress.annotations }}
    labels: {{ dsc.ingress.labels }}
  client:
    replicaCount: 1
    container:
      port: 8080
    healthcheckPath: "/"
    strategy:
      type: "RollingUpdate"
    startupProbe:
      enabled: true
      initialDelaySeconds: 0
      successThreshold: 1
      failureThreshold: 10
      periodSeconds: 10
      timeoutSeconds: 5
    readinessProbe:
      enabled: true
      initialDelaySeconds: 15
      successThreshold: 2
      failureThreshold: 2
      periodSeconds: 10
      timeoutSeconds: 5
    livenessProbe:
      enabled: true
      initialDelaySeconds: 30
      successThreshold: 1
      failureThreshold: 3
      periodSeconds: 30
      timeoutSeconds: 5
    service:
      type: "ClusterIP"
      port: 80
    resources:
      requests:
        memory: "128Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 3
      targetCPUUtilizationPercentage: 80
      targetMemoryUtilizationPercentage: 80
  server:
    replicaCount: 1
    container:
      port: 8080
    healthcheckPath: "/api/v1/healthz"
    strategy:
      type: "RollingUpdate"
    startupProbe:
      enabled: true
      initialDelaySeconds: 0
      successThreshold: 1
      failureThreshold: 10
      periodSeconds: 10
      timeoutSeconds: 5
    readinessProbe:
      enabled: true
      initialDelaySeconds: 15
      successThreshold: 2
      failureThreshold: 2
      periodSeconds: 10
      timeoutSeconds: 5
    livenessProbe:
      enabled: true
      initialDelaySeconds: 30
      successThreshold: 1
      failureThreshold: 3
      periodSeconds: 30
      timeoutSeconds: 5
    extraCa: 
      name: ""
      key: ""
      mountSubPath: "ca_certs"
    service:
      type: "ClusterIP"
      port: 80
    disabledPlugins: ""
    resources:
      requests: 
        memory: "128Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"
    autoscaling:
      enabled: false 
      minReplicas: 1   
      maxReplicas: 3
      targetCPUUtilizationPercentage: 80
      targetMemoryUtilizationPercentage: 80
    serviceAccount:
      create: true
      name: "cpn-console-server"
    envFrom:
      - secretRef:
          name: dso-config
{% if dsc.observatorium.installEnabled %}
    env:
      DSO_OBSERVABILITY_CHART_VERSION: {{ dsc.observatorium.observabilityChartVersion | quote }}
      GRAFANA_URL: https://<path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/global/values#domain| jsonPath {.grafana}>
    plugins:
    - https://github.com/cloud-pi-native/console-plugin-observability/releases/download/{{ dsc.observatorium.observabilityPluginVersion }}/build-artifact.zip
{% endif %}
  postgresql:
    enabled: false
    nameOverride: "cpn-console-db"
    architecture: "standalone"
