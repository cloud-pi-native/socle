- name: Install gitlab subscription
  kubernetes.core.k8s:
    template: "{{ item }}"
  with_items:
    - operator-group.yaml.j2
    - operator-subscription.yaml.j2

- name: Wait Gitlab CRD exist
  kubernetes.core.k8s_info:
    api_version: apps.gitlab.com/v1beta1
    kind: GitLab
    namespace: "{{ GITLAB_NAMESPACE }}"
  register: gitlab_kind
  until: gitlab_kind.api_found

- name: Get Gitlab client secret
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: "{{ KEYCLOAK_NAMESPACE }}"
    name: keycloak-client-secret-gitlab-client
  register: gitlab_secret
  failed_when: gitlab_secret.resources | length == 0

- name: Define provider secret content
  ansible.builtin.set_fact:
    provider: |
      name: openid_connect
      label: Keycloak
      args:
        name: openid_connect
        scope:
          - openid
          - generic
        response_type: code
        issuer: https://{{ KEYCLOAK_DOMAIN }}/auth/realms/dso
        client_auth_method: query
        discovery: true
        uid_field: email
        client_options:
          identifier: {{ gitlab_secret.resources[0].data.CLIENT_ID | b64decode }}
          secret: {{ gitlab_secret.resources[0].data.CLIENT_SECRET | b64decode }}
          redirect_uri: https://{{ GITLAB_DOMAIN }}/users/auth/openid_connect/callback

- name: Create keycloak secret
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      data:
        provider: "{{ provider | b64encode }}"
      kind: Secret
      metadata:
        name: openid-connect
        namespace: "{{ GITLAB_NAMESPACE }}"

- name: Create exposed_ca Secret
  kubernetes.core.k8s:
    kind: Secret
    namespace: "{{ GITLAB_NAMESPACE }}"
    name: exposed-ca
    definition:
      data:
        tls.crt: "{{ exposed_ca_pem | b64encode }}"

- name: Prepare Gitlab helm values
  ansible.builtin.set_fact:
    gitlab_values: "{{ lookup('template', 'gitlab-instance.yaml.j2') | from_yaml }}"

- name: Merge with gitlab user values
  set_fact:
    gitlab_values: "{{ gitlab_values | combine(GITLAB_VALUES, recursive=True) }}"

- name: Install gitlab instance
  kubernetes.core.k8s:
    api_version: apps.gitlab.com/v1beta1
    kind: GitLab
    name: gitlab
    namespace: "{{ GITLAB_NAMESPACE }}"
    definition:
      spec:
        chart:
          version: "{{ GITLAB_VERSION }}"
          values: "{{ gitlab_values }}"

- name: Wait gitlab instance to be 'Running'
  kubernetes.core.k8s_info:
    api_version: apps.gitlab.com/v1beta1
    kind: GitLab
    namespace: "{{ GITLAB_NAMESPACE }}"
    name: gitlab
  register: gitlab_instance
  until: gitlab_instance.resources[0] is defined and gitlab_instance.resources[0].status is defined and gitlab_instance.resources[0].status.phase == 'Running'
  retries: 45
  delay: 20

- name: Find gitlab token in inventory
  kubernetes.core.k8s_info:
    namespace: "{{ CONSOLE_NAMESPACE }}"
    kind: ConfigMap
    name: dso-config
  register: ansible_inventory

- name: Get gitlab token
  ansible.builtin.set_fact:
    gitlab_token: "{{ ansible_inventory.resources[0].data.GITLAB_TOKEN }}"
  when: ansible_inventory.resources[0].data.GITLAB_TOKEN is defined and ansible_inventory.resources[0].data.GITLAB_TOKEN | length != 0
  register: set_token_inv

- name: Test Gitlab token
  when: set_token_inv.skipped is not defined
  ansible.builtin.uri:
    validate_certs: "{{ exposed_ca.type == 'none' }}"
    url: "https://{{ GITLAB_DOMAIN }}/api/v4/admin/ci/variables"
    headers:
      "PRIVATE-TOKEN": "{{ gitlab_token }}"
  register: test_token
  ignore_errors: true

- name: Initialize gitlab token
  when: (set_token_inv.skipped is defined and set_token_inv.skipped) or (test_token.status != 200)
  block:
    - name: Get toolbox pod name
      kubernetes.core.k8s_info:
        kind: pod
        label_selectors:
          - app = toolbox
        namespace: "{{ GITLAB_NAMESPACE }}"
      register: toolbox_pods

    - name: Set toolbox pod name
      ansible.builtin.set_fact:
        tb_pod: "{{ toolbox_pods.resources[0].metadata.name }}"

    - name: Create Token
      kubernetes.core.k8s_exec:
        pod: "{{ tb_pod }}"
        namespace: "{{ GITLAB_NAMESPACE }}"
        command: >
          bash -c "echo 'PersonalAccessToken.create!(user_id: 1
          , name: \"ANSIBLE-DSO\"
          , scopes: [:api, :read_repository, :write_repository]).token' | gitlab-rails console"
      register: token

    - name: Set new gitlab token
      ansible.builtin.set_fact:
        gitlab_token: "{{ token.stdout_lines[-2][1:-1] }}"
    #      when: ansible_inventory.resources[0].data.GITLAB_TOKEN is defined

    - name: Update inventory
      kubernetes.core.k8s:
        kind: ConfigMap
        name: dso-config
        namespace: "{{ CONSOLE_NAMESPACE }}"
        state: patched
        definition:
          data:
            GITLAB_TOKEN: "{{ gitlab_token }}"

- name: Get settings
  ansible.builtin.uri:
    validate_certs: "{{ exposed_ca.type == 'none' }}"
    url: "https://{{ GITLAB_DOMAIN }}/api/v4/application/settings"
    headers:
      "PRIVATE-TOKEN": "{{ gitlab_token }}"
  register: get_settings
  ignore_errors: true

- name: Set some parameters
  ansible.builtin.uri:
    validate_certs: "{{ exposed_ca.type == 'none' }}"
    url: "https://{{ GITLAB_DOMAIN }}/api/v4/application/settings"
    method: PUT
    headers:
      "PRIVATE-TOKEN": "{{ gitlab_token }}"
    body:
      signup_enabled: false
      outbound_local_requests_allowlist_raw: "0.0.0.0/0"
      default_branch_protection: 0
    body_format: form-urlencoded
  changed_when: true

- name: Set parent group name
  set_fact:
    index: "0"
    parent: ""

- name: Include create group
  include_tasks:
    file: create-group.yaml

- name: "Set or update some CI/CD variables"
  community.general.gitlab_group_variable:
    api_url: "https://{{ GITLAB_DOMAIN }}"
    api_token: "{{ gitlab_token }}"
    validate_certs: "{{ exposed_ca.type == 'none' }}"
    group: "{{ projectsRootDir | join('/') }}"
    purge: false
    variables:
      - name: VAULT_KV
        value: forge-dso
      - name: CATALOG_PATH
        value: "{{ projectsRootDir | join('/') }}/catalog"
      - name: PROJECTS_ROOT_DIR
        value: "{{ projectsRootDir | join('/') }}"
      - name: "NEXUS_HOST_URL"
        value: "https://{{ NEXUS_DOMAIN }}"
      - name: "NEXUS_HOSTNAME"
        value: "{{ NEXUS_DOMAIN }}"
      - name: "SONAR_HOST_URL"
        value: "https://{{ SONAR_DOMAIN }}"
      - name: "VAULT_AUTH_PATH"
        value: "{{ vault_auth_path }}"
      - name: "VAULT_AUTH_ROLE"
        value: "{{ vault_auth_role }}"
      - name: "VAULT_SERVER_URL"
        value: "https://{{ VAULT_DOMAIN }}"
      - name: "MVN_CONFIG_FILE"
        variable_type: "file"
        value: "{{ mvn_config_file }}"
      - name: "NPM_FILE"
        variable_type: "file"
        value: "{{ npm_file }}"

- name: "Set or update proxy CI/CD variables"
  community.general.gitlab_group_variable:
    api_url: "https://{{ GITLAB_DOMAIN }}"
    api_token: "{{ gitlab_token }}"
    validate_certs: "{{ exposed_ca.type == 'none' }}"
    group: "{{ projectsRootDir | join('/') }}"
    purge: false
    state: "{{ USE_PROXY | ternary('present', 'absent') }}"
    variables:
      - name: "HTTP_PROXY"
        value: "{{ HTTP_PROXY }}"
      - name: "HTTPS_PROXY"
        value: "{{ HTTPS_PROXY }}"
      - name: "NO_PROXY"
        value: "{{ NO_PROXY }}"
      - name: "PROXY_HOST"
        value: "{{ PROXY_HOST }}"
      - name: "PROXY_PORT"
        value: "{{ PROXY_PORT }}"
      - name: "http_proxy"
        value: "{{ HTTP_PROXY }}"
      - name: "https_proxy"
        value: "{{ HTTPS_PROXY }}"
      - name: "no_proxy"
        value: "{{ NO_PROXY }}"

- name: "Set or update CA_BUNDLE variable"
  community.general.gitlab_group_variable:
    api_url: "https://{{ GITLAB_DOMAIN }}"
    api_token: "{{ gitlab_token }}"
    validate_certs: "{{ exposed_ca.type == 'none' }}"
    group: "{{ projectsRootDir | join('/') }}"
    purge: false
    state: "{{ additionals_ca | ternary('present', 'absent') }}"
    variables:
      - name: "CA_BUNDLE"
        value: "{{ [additionals_ca_pem, exposed_ca_pem] | join('\n') }}"
        variable_type: file