---
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: {{ dsc.global.gitOps.envName }}-dso-install-manager
  namespace: {{ dsc.argocdInfra.namespace }}
spec:
  goTemplate: true
  goTemplateOptions: ["missingkey=error"]
  ignoreApplicationDifferences:
    - jqPathExpressions:
        - .spec.source.plugin.env[] | select(.name == "HELM_VALUES").value
  generators:
    - matrix:
        generators:
          - git:
              repoURL: {{ dsc.global.gitOps.repo.url }}
              revision: {{ dsc.global.gitOps.repo.revision }}
              files:
                - path: "{{ dsc.global.gitOps.repo.path }}/envs/*/*.json"
{%- raw %}
          - list:
              elementsYaml: "{{ .apps | toJson }}"
            selector:
              matchExpressions:
                - key: enabled
                  operator: In
                  values:
                    - "true"
{% endraw %}
  template:
    metadata:
      name: "{{ dsc.global.gitOps.envName }}-{{"{{"}}.namespacePrefix{{"}}"}}{{"{{"}}.app{{"}}"}}"
{%- raw %}
      annotations:
        argocd.argoproj.io/compare-options: ServerSideDiff=true
        argocd.argoproj.io/sync-wave: "{{.syncWave}}"
      labels:
        platform.env: "{{.env}}"
        platform.provider: "{{.provider}}"
        platform.region: "{{.region}}"
      finalizers:
        - resources-finalizer.argocd.argoproj.io
{% endraw %}
    spec:
      project: {{ dsc.argocdInfra.projectName }}
      revisionHistoryLimit: 3
      source:
        repoURL: {{ dsc.global.gitOps.repo.url }}
        path: "{{ dsc.global.gitOps.repo.path }}{% raw %}/envs/{{.env}}/apps/{{.app}}{% endraw %}"
{%- raw %}
        targetRevision: "{{.targetRevision}}"
        plugin:
          env:
            - name: AVP_SECRET
              value: vault-plugin-secret
            - name: HELM_ARGS
              value: -f values.yaml
            - name: HELM_VALUES
              value: |
                destinationClusterName: {{.destination.clusterName}}
      destination:
        name: "{{ default .destination.clusterName .clusterName }}"
        namespace: "{{ default .namespacePrefix .customNamespacePrefix }}{{.namespace}}"
      syncPolicy:
        automated:
          prune: true
        #  selfHeal: true
        syncOptions:
          - CreateNamespace=true
          - ApplyOutOfSyncOnly=true
          - ServerSideApply=true
  syncPolicy:
    preserveResourcesOnDeletion: true
    # automated:
    #   selfHeal: true
{% endraw %}
