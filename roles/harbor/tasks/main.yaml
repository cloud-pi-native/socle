- name: Create harbor Namespace
  kubernetes.core.k8s:
    definition:
      kind: Namespace
      metadata:
        name: "{{ HARBOR_NAMESPACE }}"

- name: Create service account
  kubernetes.core.k8s:
    definition:
      kind: ServiceAccount
      metadata:
        name: harbor-sa
        namespace: "{{ HARBOR_NAMESPACE }}"

- name: Harbor crb
  kubernetes.core.k8s:
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        creationTimestamp: null
        name: system:openshift:scc:privileged-harbor
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: system:openshift:scc:privileged
      subjects:
        - kind: ServiceAccount
          namespace: "{{ HARBOR_NAMESPACE }}"
          name: harbor-sa

- name: Add helm repo
  kubernetes.core.helm_repository:
    name: harbor
    repo_url: https://helm.goharbor.io

- name: Set harbor helm values
  ansible.builtin.set_fact:
    harbor_values: "{{ lookup('template', 'values.yaml.j2') | from_yaml }}"

- name: Merge with harbor user values
  set_fact:
    harbor_values: "{{ harbor_values | combine(HARBOR_VALUES, recursive=True) }}"

- name: Deploy helm
  kubernetes.core.helm:
    name: harbor
    chart_ref: harbor/harbor
    chart_version: "1.12.0"
    release_namespace: "{{ HARBOR_NAMESPACE }}"
    values: "{{ harbor_values }}"

- name: Update inventory
  kubernetes.core.k8s:
    kind: ConfigMap
    name: dso-config
    namespace: "{{ CONSOLE_NAMESPACE }}"
    state: patched
    definition:
      data:
        HARBOR_ADMIN_PASSWORD: "{{ HARBOR_ADMIN_PASSWORD }}"

- name: Get harbor config
  ansible.builtin.uri:
    validate_certs: "{{ exposed_ca.type == 'none' }}"
    url: https://{{ HARBOR_DOMAIN }}/api/v2.0/configurations
    password: "{{ HARBOR_ADMIN_PASSWORD }}"
    user: admin
    force_basic_auth: true
    body_format: json
    status_code: [200, 503]
  until: get_harbor_config.status != 503
  register: get_harbor_config
  retries: 15

- name: Get harbor client secret
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: "{{ KEYCLOAK_NAMESPACE }}"
    name: keycloak-client-secret-harbor-client
  register: harbor_secret
  failed_when: harbor_secret.resources | length == 0

- name: Set Harbor config
  ansible.builtin.set_fact:
    harbor_config:
      "auth_mode": "oidc_auth"
      "notification_enable": true
      "oidc_admin_group": "admin"
      "oidc_auto_onboard": true
      "oidc_client_id": "{{ harbor_secret.resources[0].data.CLIENT_ID | b64decode }}"
      "oidc_endpoint": "https://{{ KEYCLOAK_DOMAIN }}/auth/realms/dso"
      "oidc_extra_redirect_parms": "{}"
      "oidc_group_filter": ""
      "oidc_groups_claim": "groups"
      "oidc_name": "keycloak"
      "oidc_scope": "openid"
      "oidc_user_claim": "email"
      "oidc_verify_cert": "{{ exposed_ca.type == 'none' }}"
      "project_creation_restriction": "adminonly"
      "quota_per_project_enable": true
      "read_only": false
      "robot_name_prefix": "robot$"
      "robot_token_duration": 30
      "self_registration": false

- name: Assert element
  ansible.builtin.assert:
    that:
      - harbor_config[item] == get_harbor_config.json[item].value
    quiet: true
  with_items:
    - "{{ harbor_config | list }}"
  ignore_errors: true
  register: check_config

- name: PUT harbor config
  ansible.builtin.uri:
    validate_certs: "{{ exposed_ca.type == 'none' }}"
    method: PUT
    url: https://{{ HARBOR_DOMAIN }}/api/v2.0/configurations
    password: "{{ HARBOR_ADMIN_PASSWORD }}"
    user: admin
    force_basic_auth: true
    body_format: json
    body: "{{ harbor_config | combine({'oidc_client_secret': harbor_secret.resources[0].data.CLIENT_SECRET | b64decode}) }}"
  when: check_config.failed is defined and check_config.failed
  changed_when: true
