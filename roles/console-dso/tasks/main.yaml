---
- name: Create console Namespace
  kubernetes.core.k8s:
    definition:
      kind: Namespace
      metadata:
        name: "{{ dsc.console.namespace }}"

- name: Apply project
  kubernetes.core.k8s:
    template: project.j2

- name: Get console frontend client secret
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: "{{ dsc.keycloak.namespace }}"
    name: keycloak-client-secret-console-frontend
  register: console_frontend_secret
  failed_when: console_frontend_secret.resources | length == 0

- name: Get console backend client secret
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: "{{ dsc.keycloak.namespace }}"
    name: keycloak-client-secret-console-backend
  register: console_backend_secret
  failed_when: console_backend_secret.resources | length == 0

- name: Get old app.yaml
  kubernetes.core.k8s_info:
    kind: Application
    namespace: "{{ dsc.argocd.namespace }}"
    name: console-pi-native
  register: console_app

- name: Generate new values (first deployment)
  ansible.builtin.set_fact:
    session_secret: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters') }}"
  when: console_app.resources | length == 0

- name: Set bundle-ca cm
  kubernetes.core.k8s:
    name: bundle
    namespace: "{{ dsc.console.namespace }}"
    kind: ConfigMap
    api_version: v1
    definition:
      data:
        ca.pem: |
          {{ exposed_ca_pem }}
  when: dsc.exposedCA.type != 'none'

- name: CNPG s3 CA (secret)
  when: >
    dsc.global.backup.cnpg.enabled and
    dsc.global.backup.s3.endpointCA.namespace is defined and
    dsc.global.backup.s3.endpointCA.name is defined and
    dsc.global.backup.s3.endpointCA.key is defined
  block:
    - name: Get secret
      kubernetes.core.k8s_info:
        name: "{{ dsc.global.backup.s3.endpointCA.name }}"
        namespace: "{{ dsc.global.backup.s3.endpointCA.namespace }}"
        kind: Secret
      register: cnpg_s3_ca_resource

    - name: Extract key
      ansible.builtin.set_fact:
        cnpg_s3_ca_pem: "{{ cnpg_s3_ca_resource.resources[0].data[dsc.global.backup.s3.endpointCA.key] }}"

    - name: Set cnpg bundle-ca secret
      kubernetes.core.k8s:
        name: "bundle-cnpg-s3"
        namespace: "{{ dsc.console.namespace }}"
        kind: Secret
        api_version: v1
        definition:
          data:
            ca.pem: "{{ cnpg_s3_ca_pem }}"

- name: Set cnpg backup secret
  kubernetes.core.k8s:
    name: "{{ dsc.global.backup.s3.credentials.name }}"
    namespace: "{{ dsc.console.namespace }}"
    kind: Secret
    api_version: v1
    definition:
      data:
        accessKeyId: "{{ dsc.global.backup.s3.credentials.accessKeyId.value | b64encode }}"
        secretAccessKey: "{{ dsc.global.backup.s3.credentials.secretAccessKey.value | b64encode }}"
  when: dsc.global.backup.cnpg.enabled

- name: Remove cnpg scheduled backup
  kubernetes.core.k8s:
    api_version: v1
    kind: ScheduledBackup
    namespace: "{{ dsc.console.namespace }}"
    name: pg-cluster-console
    state: absent
  when: not dsc.global.backup.cnpg.enabled

- name: Set path fact
  ansible.builtin.set_fact:
    path: "{{ role_path + '/templates/values' }}"

- name: Get pg-cluster-console-app secret
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.console.namespace }}"
    kind: Secret
    name: pg-cluster-console-app
  register: pg_db_secret

- name: Get kubernetes service
  kubernetes.core.k8s_info:
    namespace: default
    kind: Service
    name: kubernetes
  register: kubernetes_service_clusterip
  when: dsc.proxy.enabled

- name: Compute Console Helm values
  ansible.builtin.include_role:
    name: combine
  vars:
    combine_path: "{{ path }}"
    combine_user_values: "{{ dsc.console['values'] }}"
    combine_dest_var: "console_values"

- name: Apply app (argoCD project)
  kubernetes.core.k8s:
    template: app.yaml.j2

- name: Check if first console deployment
  block:
    - name: Set first_console_deployment to "true"
      ansible.builtin.set_fact:
        first_console_deployment: true

    - name: Get pg-cluster-console-app secret
      kubernetes.core.k8s_info:
        namespace: "{{ dsc.console.namespace }}"
        kind: Secret
        name: pg-cluster-console-app
      register: pg_db_secret
      until: pg_db_secret.resources[0].data.uri is defined
      retries: 10
      delay: 5
  when: pg_db_secret.resources[0].data.uri is undefined

- name: First console deployment
  block:
    - name: Compute Console Helm values
      ansible.builtin.include_role:
        name: combine
      vars:
        combine_path: "{{ path }}"
        combine_user_values: "{{ dsc.console['values'] }}"
        combine_dest_var: "console_values"

    - name: Apply app (argoCD project)
      kubernetes.core.k8s:
        template: app.yaml.j2
  when: first_console_deployment is defined

- name: Set alerting rules
  when: dsc.global.alerting.enabled
  kubernetes.core.k8s:
    template: prometheusrule.yml.j2
