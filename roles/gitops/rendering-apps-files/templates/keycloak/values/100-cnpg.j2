cluster:
  nameOverride: "pg-cluster-keycloak"
  fullnameOverride: "pg-cluster-keycloak"
  cluster:
    primaryUpdateMethod: restart
    enablePDB: false
    imageName: "<path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/global/values#image | jsonPath {.repository.ghcr}>/{{ dsc.keycloak.cnpg.imageName }}"
{% if use_image_pull_secrets %}
    imagePullSecrets:
    - name: dso-config-pull-secret
{% endif %}
    initdb:
      owner: "keycloak"
      database: "keycloak"
  
    # Require 1Gi of space per instance using default storage class
    storage:
      size: {{ dsc.keycloak.postgresPvcSize }}
{% if dsc.keycloak.postgresWalPvcSize is defined %}
    walStorage:
      enabled: true
      size: {{ dsc.keycloak.postgresWalPvcSize }}
{% endif %}
  
    postgresql:
      parameters:
        max_worker_processes: "60"
{% if dsc.keycloak.postgresWalMaxSlotKeepSize is defined %}
        max_slot_wal_keep_size: {{ dsc.keycloak.postgresWalMaxSlotKeepSize }}
{% endif %}
      pg_hba:
        - host keycloak keycloak all md5
        - host keycloak streaming_replica all md5

{% if dsc.global.backup.velero.enabled %}
    annotations:
      pre.hook.backup.velero.io/command: '["/bin/bash", "-c", "(( $(date +%d) %2 == 0 )) && index=0 || index=1; pg_dump -U postgres -Fc -d keycloak > /var/lib/postgresql/data/app.dump-${index}"]'
      pre.hook.backup.velero.io/container: postgres
      pre.hook.backup.velero.io/on-error: Fail
      pre.hook.backup.velero.io/timeout: 90s
{% endif %}

    monitoring:
      enabled: {{ dsc.global.metrics.enabled }}

{% if dsc.global.backup.cnpg.enabled %}
  backups:       
    destinationPath: s3://<path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/global/values#backup | jsonPath {.s3BucketName}>/cnpg
    enabled: true
    endpointURL: <path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/global/values#backup | jsonPath {.s3Endpoint}>
    retentionPolicy: 14d
    s3:          
      accessKey: <path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/global/values#backup | jsonPath {.s3AccessKey}>
      secretKey: <path:{{ vaultinfra_kv_name }}/data/env/{{ dsc_name }}/apps/global/values#backup | jsonPath {.s3SecretKey}>
    scheduledBackups:
    - name: pg-cluster-keycloak
      schedule: 0 0 */6 * * *                                                              
      backupOwnerReference: self
      method: barmanObjectStore
{% endif %}
