---
- name: Get Sonarqube admin password secret
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.sonarqube.namespace }}"
    kind: Secret
    name: "sonarqube"
  register: sonarqube_pwd

- name: Get SonarQube migration status
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: https://{{ sonar_domain }}/api/v2/system/migrations-status
    user: "admin"
    password: "{{ sonarqube_pwd.resources[0].data.password | b64decode }}"
    force_basic_auth: true
    method: GET
    return_content: true
    status_code: 200
  register: sonar_migration_status

- name: Trigger DB migration
  when: "'Database migration is required' in sonar_migration_status.json.message"
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: https://{{ sonar_domain }}/api/system/migrate_db
    user: "admin"
    password: "{{ sonarqube_pwd.resources[0].data.password | b64decode }}"
    force_basic_auth: true
    method: POST
    status_code: [200, 204]

- name: Wait SonarQube status to be UP
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: https://{{ sonar_domain }}/api/system/status
    user: "admin"
    password: "{{ sonarqube_pwd.resources[0].data.password | b64decode }}"
    force_basic_auth: true
    method: GET
    return_content: true
    status_code: 200
  register: sonar_check
  until: sonar_check.json.status == "UP"
  retries: 60
  delay: 5

- name: Wait sonarqube endpoint to initialize
  kubernetes.core.k8s_info:
    kind: Endpoints
    namespace: "{{ dsc.sonarqube.namespace }}"
    label_selectors:
      - "release={{ dsc.global.gitOps.envName }}-{{ dsc.sonarqube.namespace }}"
  register: endpoint
  until: endpoint.resources[0].subsets[0].addresses[0].ip is defined
  retries: 45
  delay: 5

# Retrieve Vault Infra token

- name: Get Vault Infra token
  when: lookup('ansible.builtin.env', 'VAULT_INFRA_TOKEN') != ''
  ansible.builtin.set_fact:
    vault_infra_token: "{{ lookup('ansible.builtin.env', 'VAULT_INFRA_TOKEN') }}"

- name: Get Vault Infra keys and token
  when: lookup('ansible.builtin.env', 'VAULT_INFRA_TOKEN') == ''
  block:
    - name: Get Vault Infra secrets
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_infra }}"
        proxy: "{{ kubeconfig_proxy_infra | default('') }}"
        namespace: "{{ dsc.vaultInfra.namespace }}"
        kind: Secret
      register: vault_infra_secrets

    - name: Set vault_infra_keys_secret_name
      ansible.builtin.set_fact:
        vault_infra_keys_secret_name: "{{ vault_infra_secrets.resources
          | selectattr('metadata.name', 'contains', 'vault-keys')
          | map(attribute='metadata.name') | first }}"

    - name: Get Vault Infra keys
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_infra }}"
        proxy: "{{ kubeconfig_proxy_infra | default('') }}"
        namespace: "{{ dsc.vaultInfra.namespace }}"
        kind: Secret
        name: "{{ vault_infra_keys_secret_name }}"
      register: vault_infra_keys

    - name: Get Vault Infra token
      ansible.builtin.set_fact:
        vault_infra_token: "{{ vault_infra_keys.resources[0].data.root_token | b64decode }}"

- name: Get sonarApiToken from infra Vault
  block:
    - name: Retrieve SonarQube values from infra Vault
      community.hashi_vault.vault_kv2_get:
        url: "https://{{ vaultinfra_domain }}"
        auth_method: token
        token: "{{ vault_infra_token }}"
        engine_mount_point: "{{ vaultinfra_kv_name }}"
        path: "env/{{ dsc_name }}/apps/sonarqube/values"
        validate_certs: "{{ vaultinfra_cert_valid }}"
      register: sonar_vault_values
      ignore_errors: true

    - name: Set retrieved_token_pass fact
      ansible.builtin.set_fact:
        retrieved_token_pass: >-
          {{
            (sonar_vault_values.data.data.auth.sonarApiToken)if sonar_vault_values.data.data.auth.sonarApiToken is defined and
            sonar_vault_values.data.data.auth.sonarApiToken | length > 0
            else ''
          }}

- name: Reset Admin Password procedure
  when: retrieved_token_pass | length == 0
  ansible.builtin.include_tasks:
    file: reset-admin-password.yaml

- name: Get Sonarqube admin password secret
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.sonarqube.namespace }}"
    kind: Secret
    name: "sonarqube"
  register: sonarqube_pwd

- name: Remove permissions for sonar-users
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: https://{{ sonar_domain }}/api/permissions/remove_group?groupName=sonar-users&permission={{ item }}
    user: "admin"
    password: "{{ sonarqube_pwd.resources[0].data.password | b64decode }}"
    force_basic_auth: true
    method: post
    status_code: 204
  with_items:
    - scan
    - provisioning
